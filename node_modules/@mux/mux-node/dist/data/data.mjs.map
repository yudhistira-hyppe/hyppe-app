{"version":3,"sources":["../../src/base.ts","../../src/version.ts","../../src/data/resources/errors.ts","../../src/data/resources/exports.ts","../../src/data/resources/filters.ts","../../src/data/resources/dimensions.ts","../../src/data/resources/incidents.ts","../../src/data/resources/metrics.ts","../../src/data/resources/real_time.ts","../../src/data/resources/monitoring.ts","../../src/data/resources/video_views.ts","../../src/data/data.ts"],"sourcesContent":["/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_config\", \"_tokenId\", \"_tokenSecret\"] }] */\n\nimport Axios, { AxiosInstance } from 'axios';\nimport EventEmitter from 'events';\n\nimport { RequestOptions, RequestParams } from './RequestOptions.js';\nimport { VERSION } from './version.js';\n\n/**\n * Mux Base Class - Simple base class to be extended by all child modules.\n *\n * @ignore\n * @property {string} tokenId - The ID for the access token.\n * @property {string} tokenSecret - The secret for the access token.\n * @property {object} config - The configuration for the Base object.\n * @property {Object} requestOptions - The HTTP request options for Mux Assets\n * @property {string} requestOptions.auth.username - HTTP basic auth username (access token)\n * @property {string} requestOptions.auth.password - HTTP basic auth password (secret)\n *\n */\nexport class Base extends EventEmitter {\n  readonly http: AxiosInstance;\n\n  private _tokenId!: string;\n  private _tokenSecret!: string;\n  private _config!: RequestOptions;\n\n  constructor(muxBase: Base);\n  constructor(requestOptions: RequestOptions);\n  constructor(tokenId: string, tokenSecret: string);\n  constructor(tokenId: string, tokenSecret: string, config: RequestOptions);\n  constructor(\n    tokenIdOrOptionsOrBase: string | RequestOptions | Base,\n    tokenSecret?: string,\n    config?: RequestOptions\n  ) {\n    super();\n\n    if (tokenIdOrOptionsOrBase instanceof Base) {\n      // we could do this with Object.assign but I'd rather we be really explicit about what we copy.\n      this.config = tokenIdOrOptionsOrBase._config;\n      this._tokenId = tokenIdOrOptionsOrBase._tokenId;\n      this._tokenSecret = tokenIdOrOptionsOrBase._tokenSecret;\n\n      this.http = tokenIdOrOptionsOrBase.http;\n    } else {\n      if (\n        typeof tokenIdOrOptionsOrBase === 'object' &&\n        !(tokenIdOrOptionsOrBase instanceof Base)\n      ) {\n        this.config = tokenIdOrOptionsOrBase;\n        this.tokenId = undefined;\n        this.tokenSecret = undefined;\n      } else {\n        // without 'as' this complains of Base | string typing, but we have ruled out the Base case implicitly\n        this.tokenId = tokenIdOrOptionsOrBase as string;\n        this.tokenSecret = tokenSecret;\n        this.config = config ?? {};\n      }\n\n      const request: RequestParams = {\n        baseURL: this.config.baseUrl,\n        headers: {\n          'User-Agent': `Mux Node | ${VERSION}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        withCredentials: false,\n        auth: {\n          username: this._tokenId,\n          password: this._tokenSecret,\n        },\n      };\n\n      if (this.config.platform?.name) {\n        if (this.config.platform?.name?.includes('|')) {\n          throw new Error('Platform name cannot contain a \"|\" value.');\n        }\n\n        if (this.config.platform?.version?.includes('|')) {\n          throw new Error('Platform version cannot contain a \"|\" value.');\n        }\n\n        request.headers[\n          'x-source-platform'\n        ] = `${this.config.platform?.name} | ${this.config.platform?.version}`;\n      }\n\n      this.http = Axios.create(request);\n\n      this.http.interceptors.request.use((req: any) => {\n        this.emit('request', req);\n\n        return req;\n      });\n\n      this.http.interceptors.response.use(\n        (res: any) => {\n          this.emit('response', res);\n          if (res.config.url && this.isVideoUrl(res.config.url)) {\n            return res.data && res.data.data;\n          }\n\n          return res.data;\n        },\n        (errorRes: any) =>\n          Promise.reject(\n            (errorRes.response && errorRes.response.data.error) || errorRes\n          )\n      );\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isVideoUrl(url: string) {\n    return url.startsWith(`/video/v1/`);\n  }\n\n  set config(options: RequestOptions) {\n    this._config = {\n      baseUrl: 'https://api.mux.com',\n      ...options,\n    };\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  set tokenId(token: string | undefined) {\n    const v = token || process.env.MUX_TOKEN_ID;\n    if (!v || v.length === 0) {\n      throw new Error('API Access Token must be provided.');\n    }\n\n    this._tokenId = v;\n  }\n\n  get tokenId() {\n    return this._tokenId;\n  }\n\n  set tokenSecret(secret: string | undefined) {\n    const v = secret || process.env.MUX_TOKEN_SECRET;\n    if (!v || v.length === 0) {\n      throw new Error('API secret key must be provided');\n    }\n\n    this._tokenSecret = v;\n  }\n\n  get tokenSecret() {\n    return this._tokenSecret;\n  }\n}\n","export const VERSION = '7.3.0' as const;\n","/*!\n * Mux Errors\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport { ErrorsListResponse, ErrorsParams } from '../domain.js';\n\n/**\n * @private Base errors path for the Mux API\n * */\nconst PATH = '/data/v1/errors';\n\n/**\n * Errors Class - Provides access to the Mux Data Errors API\n * @extends Base\n * @example\n * const { Data } = new Mux(accessToken, secret);\n *\n * // Returns a list of playback errors filtered by the windows operating system\n * Data.Errors.list({ filters: ['operating_system:windows'] });\n */\nexport class Errors extends Base {\n  /**\n   * Returns a list of playback errors\n   *\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Data } = new Mux(accessToken, secret);\n   *\n   * // Returns a list of playback errors filtered by the windows operating system\n   * Data.Errors.list({ filters: ['operating_system:windows'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-errors\n   */\n  list(params?: ErrorsParams): Promise<ErrorsListResponse> {\n    return this.http.get(PATH, { params });\n  }\n}\n","/*!\n * Mux Exports\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport { ExportsListResponse } from '../domain.js';\n\n/**\n * @private Base exports path for the Mux API\n * */\nconst PATH = '/data/v1/exports';\n\n/**\n * Exports Class - Provides access to the Mux Data Exports API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Lists the available video view exports along with URLs to retrieve them\n * Data.Exports.list();\n */\nexport class Exports extends Base {\n  /**\n   * Lists the available video view exports along with URLs to retrieve them\n   * @extends Base\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the available video view exports along with URLs to retrieve them\n   * Data.Exports.list();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-exports\n   */\n  list(): Promise<ExportsListResponse> {\n    return this.http.get(PATH);\n  }\n}\n","/*!\n * Mux Filters\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport { FilterGetResponse, FilterQueryParams } from '../domain.js';\n\n/**\n * @private Base filters path for the Mux API\n * */\nconst PATH = '/data/v1/filters';\n\n/**\n * Filters Class - Provides access to the Mux Data Filters API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Lists all the filters broken out into basic and advanced\n * Data.Filters.list();\n */\nexport class Filters extends Base {\n  /**\n   * Lists the values for a filter along with a total count of related views\n   *\n   * @param {string} filterId - The filter name/id for see https://api-docs.mux.com/#filter-get-1 for a list of all filter ids\n   * @param {Object} [queryParams] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the values for a filter along with a total count of related views\n   * Data.Filters.get('browser', { timeframe: ['7:days'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-filter-values\n   *\n   * @deprecated The method should not be used, you should use Dimensions.get instead\n   */\n  get(\n    filterId: string,\n    params?: FilterQueryParams\n  ): Promise<FilterGetResponse> {\n    process.emitWarning(\n      'The Filter API has been deprecated, please use Dimension instead',\n      'DeprecatedWarning'\n    );\n    if (!filterId) {\n      throw new Error('Filter Id is required to get filter information.');\n    }\n    return this.http.get(`${PATH}/${filterId}`, { params });\n  }\n\n  /**\n   * Lists all the filters broken out into basic and advanced\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the available video view exports along with URLs to retrieve them\n   * Data.Filters.list();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-filters\n   *\n   * @deprecated The method should not be used, you should use Dimensions.list instead\n   */\n  list() {\n    process.emitWarning(\n      'The Filter API has been deprecated, please use Dimension instead',\n      'DeprecatedWarning'\n    );\n    return this.http.get(PATH);\n  }\n}\n","/*!\n * Mux Dimensions\n * Copyright(c) 2022 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport { DimensionGetResponse, DimensionQueryParams } from '../domain.js';\n\n/**\n * @private Base dimensions path for the Mux API\n * */\nconst PATH = '/data/v1/dimensions';\n\n/**\n * Dimensions Class - Provides access to the Mux Data Dimensions API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Lists all the dimensions broken out into basic and advanced\n * Data.Dimensions.list();\n */\nexport class Dimensions extends Base {\n  /**\n   * Lists the values for a dimension along with a total count of related views\n   *\n   * @param {string} dimensionId - The dimension name/id, see https://docs.mux.com/api-reference/data#operation/list-dimensions for a list of all dimensions\n   * @param {Object} [queryParams] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the values for a dimension along with a total count of related views\n   * Data.Dimensions.get('browser', { timeframe: ['7:days'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-dimension-values\n   */\n  get(\n    dimensionId: string,\n    params?: DimensionQueryParams\n  ): Promise<DimensionGetResponse> {\n    if (!dimensionId) {\n      throw new Error('Dimension Id is required to get dimension information.');\n    }\n    return this.http.get(`${PATH}/${dimensionId}`, { params });\n  }\n\n  /**\n   * Lists all the dimensions broken out into basic and advanced\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the available Data dimensions\n   * Data.Dimensions.list();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-dimensions\n   */\n  list() {\n    return this.http.get(PATH);\n  }\n}\n","/*!\n * Mux Incidents\n * Copyright(c) 2019 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport {\n  IncidentsGetResponse,\n  IncidentsListResponse,\n  IncidentsQueryParams,\n  IncidentsRelatedQueryParams,\n} from '../domain.js';\n\n/**\n * @private Base incidents path for the Mux API\n * */\nconst PATH = '/data/v1/incidents';\n\n/**\n * Incidents Class - Provides access to the Mux Data Incidents API\n * @extends Base\n * @example\n * const { Data } = new Mux(accessToken, secret);\n *\n * // Returns a list of all open incidents\n * Data.Incidents.list({ status: 'open' });\n */\nexport class Incidents extends Base {\n  /**\n   * Returns a list of all open incidents\n   *\n   * @param {Object} [params] - example { status: 'open', severity: 'warning' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Data } = new Mux(accessToken, secret);\n   *\n   * // Returns a list of all open incidents\n   * Data.Incidents.list({ status: 'open' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-incidents\n   */\n  list(params?: IncidentsQueryParams): Promise<IncidentsListResponse> {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Returns the details for a single incident\n   *\n   * @param {string} incidentId - The ID for the incident\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns the details for a single incident\n   * Data.Incidents.get('ABCD1234');\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-incident\n   */\n  get(incidentId: string): Promise<IncidentsGetResponse> {\n    if (!incidentId) {\n      throw new Error('An incident id is required for incident details.');\n    }\n    return this.http.get(`${PATH}/${incidentId}`);\n  }\n\n  /**\n   * Returns all the incidents that seem related to a specific incident\n   *\n   * @param {string} incidentId - The ID for the incident\n   * @param {Object} [params] - example { measurement: 'median' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns all the incidents that seem related to a specific incident\n   * Data.Incidents.related('ABCD1234');\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-related-incidents\n   */\n  related(incidentId: string, params?: IncidentsRelatedQueryParams) {\n    if (!incidentId) {\n      throw new Error('An incident id is required for related incidents.');\n    }\n    return this.http.get(`${PATH}/${incidentId}/related`, { params });\n  }\n}\n","/*!\n * Mux Metrics\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport {\n  MetricsBreakdownQueryParams,\n  MetricsBreakdownResponse,\n  MetricsComparisonQueryParams,\n  MetricsComparisonResponse,\n  MetricsInsightsQueryParams,\n  MetricsInsightsResponse,\n  MetricsOverallQueryParams,\n  MetricsOverallResponse,\n  MetricsTimeseriesQueryParams,\n  MetricsTimeseriesResponse,\n} from '../domain.js';\n\n/**\n * @private Base metrics path for the Mux API\n * */\nconst PATH = '/data/v1/metrics';\n\n/**\n * Metrics Class - Provides access to the Mux Data Metrics API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // List all of the values across every breakdown for a specific metric grouped by operating system\n * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'operating_system' });\n */\nexport class Metrics extends Base {\n  /**\n   * List the breakdown values for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n   * @param {Object} params - example: {group_by: 'browser'}\n   * NOTE: the group_by query parameter is required\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List all of the values across every breakdown for a specific metric grouped by browser\n   * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-breakdown-values\n   */\n  breakdown(\n    metricId: string,\n    params?: MetricsBreakdownQueryParams\n  ): Promise<MetricsBreakdownResponse> {\n    return this.http.get(`${PATH}/${metricId}/breakdown`, { params });\n  }\n\n  /**\n   * List all of the values across every breakdown for a specific metric\n   *\n   * @param {Object} params - example { value: 'safari', timeframe: '24:hours', dimension: 'cdn' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown values for a specific metric within the last 24 hours\n   * Data.Metrics.comparison({ value: 'safari', timeframe: '24:hours', dimension: 'cdn' });\n   * Note: the value query parameter is required\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-all-metric-values\n   */\n  comparison(\n    params?: MetricsComparisonQueryParams\n  ): Promise<MetricsComparisonResponse> {\n    if (!params || (params && !params.value)) {\n      throw new Error(\n        'The value query parameter is required for comparing metrics'\n      );\n    }\n    return this.http.get(`${PATH}/comparison`, { params });\n  }\n\n  /**\n   * Returns a list of insights for a metric. These are the worst performing values across all\n   * breakdowns sorted by how much they negatively impact a specific metric.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n   * @param {Object} [params] - example { measurement: 'median', order_direction: 'desc' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get a list of insights for a metric measured by median and ordered descending\n   * Data.Metrics.insights('aggregate_startup_time', { measurement: 'median', order_direction: 'desc' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-insights\n   */\n  insights(\n    metricId: string,\n    params?: MetricsInsightsQueryParams\n  ): Promise<MetricsInsightsResponse> {\n    if (!metricId) {\n      throw new Error('A metric Id is required for insight metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/insights`, { params });\n  }\n\n  /**\n   * Returns the overall value for a specific metric, as well as the total view count,\n   * watch time, and the Mux Global metric value for the metric.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#overall-get for a list of all metric ids\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get the overall value for a specific metric within the past 7 days\n   * Data.Metrics.overall('aggregate_startup_time', { timeframe: ['7:days'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-overall-values\n   */\n  overall(\n    metricId: string,\n    params?: MetricsOverallQueryParams\n  ): Promise<MetricsOverallResponse> {\n    if (!metricId) {\n      throw new Error('A metric Id is required for overall metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/overall`, { params });\n  }\n\n  /**\n   * Returns timeseries data for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#timeseries for a list of all metric ids\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get timeseries data for a specific metric within the past 7 days\n   * Data.Metrics.timeseries('aggregate_startup_time', { timeframe: ['7:days'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-metric-timeseries-data\n   */\n  timeseries(\n    metricId: string,\n    params?: MetricsTimeseriesQueryParams\n  ): Promise<MetricsTimeseriesResponse> {\n    if (!metricId) {\n      throw new Error('A metric Id is required for timeseries metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/timeseries`, { params });\n  }\n}\n","/*!\n * Mux Real-Time\n * Copyright(c) 2020 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport {\n  RealTimeBreakdownQueryParams,\n  RealTimeBreakdownResponse,\n  RealTimeDimensionsResponse,\n  RealTimeHistogramQueryParams,\n  RealTimeHistogramResponse,\n  RealTimeMetricsResponse,\n  RealTimeTimeseriesParams,\n  RealTimeTimeseriesResponse,\n} from '../domain.js';\n\n/**\n * @private Base real-time path for the Mux API\n * */\nconst PATH = '/data/v1/realtime';\n\n/**\n * Real-Time Class - Provides access to the Mux Data Real-Time API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of available real-time dimensions\n * Data.RealTime.dimensions();\n */\nexport class RealTime extends Base {\n  /**\n   * List of available real-time dimensions\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available real-time dimensions\n   * Data.RealTime.dimensions();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-realtime-dimensions\n   *\n   * @deprecated The method should not be used, you should use Monitoring.dimensions() instead\n   */\n  dimensions(): Promise<RealTimeDimensionsResponse> {\n    return this.http.get(`${PATH}/dimensions`);\n  }\n\n  /**\n   * List available real-time metrics\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available real-time metrics\n   * Data.RealTime.metrics();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-realtime-metrics\n   *\n   * @deprecated The method should not be used, you should use Monitoring.metrics() instead\n   */\n  metrics(): Promise<RealTimeMetricsResponse> {\n    return this.http.get(`${PATH}/metrics`);\n  }\n\n  /**\n   * Get breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown information for current-concurrent-viewers by ASN for a specific time for the Windows operating system in the US\n   * Data.RealTime.breakdown('current-concurrent-viewers', { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-breakdown\n   *\n   * @deprecated The method should not be used, you should use Monitoring.breakdown() instead\n   */\n  breakdown(\n    metricId: string,\n    params?: RealTimeBreakdownQueryParams\n  ): Promise<RealTimeBreakdownResponse> {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for real-time breakdown information'\n      );\n    }\n\n    if (!params || (params && !params.dimension)) {\n      throw new Error(\n        'The dimension query parameter is required for real-time breakdown information'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/breakdown`, { params });\n  }\n\n  /**\n   * List histogram timeseries information for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List histogram timeseries information for video-startup-time for the Windows operating system in the US\n   * Data.RealTime.histogramTimeseries('video-startup-time', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-histogram-timeseries\n   *\n   * @deprecated The method should not be used, you should use Monitoring.histogramTimeseries() instead\n   */\n  histogramTimeseries(\n    metricId: string,\n    params?: RealTimeHistogramQueryParams\n  ): Promise<RealTimeHistogramResponse> {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for real-time histogram timeseries information'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/histogram-timeseries`, {\n      params,\n    });\n  }\n\n  /**\n   * List timeseries information for a specific metric along with the number of concurrent viewers.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US\n   * Data.RealTime.timeseries('playback-failure-percentage', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-timeseries\n   *\n   * @deprecated The method should not be used, you should use Monitoring.timeseries() instead\n   */\n  timeseries(\n    metricId: string,\n    params?: RealTimeTimeseriesParams\n  ): Promise<RealTimeTimeseriesResponse> {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for real-time timeseries information.'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/timeseries`, {\n      params,\n    });\n  }\n}\n","/*!\n * Mux Monitoring\n * Copyright(c) 2020 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport {\n  MonitoringBreakdownQueryParams,\n  MonitoringBreakdownResponse,\n  MonitoringDimensionsResponse,\n  MonitoringHistogramQueryParams,\n  MonitoringHistogramResponse,\n  MonitoringMetricsResponse,\n  MonitoringTimeseriesParams,\n  MonitoringTimeseriesResponse,\n} from '../domain.js';\n\n/**\n * @private Base monitoring path for the Mux API\n * */\nconst PATH = '/data/v1/monitoring';\n\n/**\n * Monitoring Class - Provides access to the Mux Data Monitoring API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of available monitoring dimensions\n * Data.Monitoring.dimensions();\n */\nexport class Monitoring extends Base {\n  /**\n   * List of available monitoring dimensions\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available monitoring dimensions\n   * Data.Monitoring.dimensions();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-monitoring-dimensions\n   */\n  dimensions(): Promise<MonitoringDimensionsResponse> {\n    return this.http.get(`${PATH}/dimensions`);\n  }\n\n  /**\n   * List available monitoring metrics\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available monitoring metrics\n   * Data.Monitoring.metrics();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-monitoring-metrics\n   */\n  metrics(): Promise<MonitoringMetricsResponse> {\n    return this.http.get(`${PATH}/metrics`);\n  }\n\n  /**\n   * Get breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#monitoring-get-1 for a list of all metric ids\n   * @param {Object} params - example { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown information for current-concurrent-viewers by ASN for a specific time for the Windows operating system in the US\n   * Data.Monitoring.breakdown('current-concurrent-viewers', { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-monitoring-breakdown\n   */\n  breakdown(\n    metricId: string,\n    params?: MonitoringBreakdownQueryParams\n  ): Promise<MonitoringBreakdownResponse> {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for monitoring breakdown information'\n      );\n    }\n\n    if (!params || (params && !params.dimension)) {\n      throw new Error(\n        'The dimension query parameter is required for monitoring breakdown information'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/breakdown`, { params });\n  }\n\n  /**\n   * List histogram timeseries information for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#monitoring-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List histogram timeseries information for video-startup-time for the Windows operating system in the US\n   * Data.Monitoring.histogramTimeseries('video-startup-time', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-monitoring-histogram-timeseries\n   */\n  histogramTimeseries(\n    metricId: string,\n    params?: MonitoringHistogramQueryParams\n  ): Promise<MonitoringHistogramResponse> {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for monitoring histogram timeseries information'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/histogram-timeseries`, {\n      params,\n    });\n  }\n\n  /**\n   * List timeseries information for a specific metric along with the number of concurrent viewers.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#monitoring-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US\n   * Data.Monitoring.timeseries('playback-failure-percentage', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-monitoring-timeseries\n   */\n  timeseries(\n    metricId: string,\n    params?: MonitoringTimeseriesParams\n  ): Promise<MonitoringTimeseriesResponse> {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for monitoring timeseries information.'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/timeseries`, {\n      params,\n    });\n  }\n}\n","/*!\n * Mux Video Views\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport {\n  VideoView,\n  VideoViewsListResponse,\n  VideoViewsQueryParams,\n} from '../domain.js';\n\n/**\n * @private Base exports path for the Mux API\n * */\nconst PATH = '/data/v1/video-views';\n\n/**\n * VideoViews Class - Provides access to the Mux Data Video Views API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of video views for a property that occurred within the specified timeframe.\n * // Results are ordered by view_end, according to what you provide for order_direction.\n * Data.VideoViews.list({order_direction: 'asc'});\n */\nexport class VideoViews extends Base {\n  /**\n   * Returns a list of video views for a property that occurred within the specified timeframe.\n   * Results are ordered by view_end, according to what you provide for order_direction.\n   *\n   * @extends Base\n   * @param {Object} queryParams - example { viewer_id: 'ABCD1234', timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of video views for a property that occurred within the specified timeframe.\n   * Data.VideoViews.list({ viewer_id: 'ABCD1234', timeframe: ['7:days'], order_direction: 'asc' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-video-views\n   */\n  list(params?: VideoViewsQueryParams): Promise<VideoViewsListResponse> {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Returns the details for a single video view\n   *\n   * @param {string} videoViewId - The ID for the video view\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns the details for a single video view\n   * Data.VideoViews.get('ABCD1234');\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-video-view\n   */\n  get(videoViewId: string): Promise<VideoView> {\n    if (!videoViewId) {\n      throw new Error('A video view Id is required for video view details.');\n    }\n    return this.http.get(`${PATH}/${videoViewId}`);\n  }\n}\n","/*!\n * Mux Data\n * Copyright(c) 2022 Mux Inc.\n */\n\nimport { Base } from '../base.js';\nimport { RequestOptions } from '../RequestOptions.js';\n\nimport { Errors } from './resources/errors.js';\nimport { Exports } from './resources/exports.js';\nimport { Filters } from './resources/filters.js';\nimport { Dimensions } from './resources/dimensions.js';\nimport { Incidents } from './resources/incidents.js';\nimport { Metrics } from './resources/metrics.js';\nimport { RealTime } from './resources/real_time.js';\nimport { Monitoring } from './resources/monitoring.js';\nimport { VideoViews } from './resources/video_views.js';\n\n/**\n * @ignore\n * @extends Base\n * Data Class - Provides access to the Mux Data API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n */\nexport class Data extends Base {\n  readonly Errors: Errors;\n  readonly Exports: Exports;\n  readonly Filters: Filters;\n  readonly Dimensions: Dimensions;\n  readonly Incidents: Incidents;\n  readonly Metrics: Metrics;\n  readonly RealTime: RealTime;\n  readonly Monitoring: Monitoring;\n  readonly VideoViews: VideoViews;\n\n  /**\n   * Data Constructor\n   *\n   * @param {string} accessToken - Mux API Access Token\n   * @param {string} secret - Mux API secret\n   * @constructor\n   */\n  constructor(base: Base);\n  constructor(config: RequestOptions);\n  constructor(accessToken: string, secret: string, config: RequestOptions);\n  constructor(\n    accessTokenOrConfigOrBase: string | RequestOptions | Base,\n    secret?: string,\n    config?: RequestOptions\n  ) {\n    if (accessTokenOrConfigOrBase instanceof Base) {\n      super(accessTokenOrConfigOrBase);\n    } else if (typeof accessTokenOrConfigOrBase === 'object') {\n      super(accessTokenOrConfigOrBase);\n    } else {\n      super(accessTokenOrConfigOrBase, secret!, config!);\n    }\n\n    /** @type {Errors} */\n    this.Errors = new Errors(this);\n\n    /** @type {Exports} */\n    this.Exports = new Exports(this);\n\n    /** @type {Filters} */\n    this.Filters = new Filters(this);\n\n    /** @type {Dimensions} */\n    this.Dimensions = new Dimensions(this);\n\n    /** @type {Incidents} */\n    this.Incidents = new Incidents(this);\n\n    /** @type {Metrics} */\n    this.Metrics = new Metrics(this);\n\n    /** @type {RealTime} */\n    this.RealTime = new RealTime(this);\n\n    /** @type {Monitoring} */\n    this.Monitoring = new Monitoring(this);\n\n    /** @type {VideoViews} */\n    this.VideoViews = new VideoViews(this);\n  }\n}\n"],"mappings":"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","names":[]}