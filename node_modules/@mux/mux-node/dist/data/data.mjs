"use strict";

// src/base.ts
import Axios from "axios";
import EventEmitter from "events";

// src/version.ts
var VERSION = "7.3.0";

// src/base.ts
var Base = class extends EventEmitter {
  constructor(tokenIdOrOptionsOrBase, tokenSecret, config) {
    var _a, _b, _c, _d, _e, _f, _g;
    super();
    if (tokenIdOrOptionsOrBase instanceof Base) {
      this.config = tokenIdOrOptionsOrBase._config;
      this._tokenId = tokenIdOrOptionsOrBase._tokenId;
      this._tokenSecret = tokenIdOrOptionsOrBase._tokenSecret;
      this.http = tokenIdOrOptionsOrBase.http;
    } else {
      if (typeof tokenIdOrOptionsOrBase === "object" && !(tokenIdOrOptionsOrBase instanceof Base)) {
        this.config = tokenIdOrOptionsOrBase;
        this.tokenId = void 0;
        this.tokenSecret = void 0;
      } else {
        this.tokenId = tokenIdOrOptionsOrBase;
        this.tokenSecret = tokenSecret;
        this.config = config ?? {};
      }
      const request = {
        baseURL: this.config.baseUrl,
        headers: {
          "User-Agent": `Mux Node | ${VERSION}`,
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        withCredentials: false,
        auth: {
          username: this._tokenId,
          password: this._tokenSecret
        }
      };
      if ((_a = this.config.platform) == null ? void 0 : _a.name) {
        if ((_c = (_b = this.config.platform) == null ? void 0 : _b.name) == null ? void 0 : _c.includes("|")) {
          throw new Error('Platform name cannot contain a "|" value.');
        }
        if ((_e = (_d = this.config.platform) == null ? void 0 : _d.version) == null ? void 0 : _e.includes("|")) {
          throw new Error('Platform version cannot contain a "|" value.');
        }
        request.headers["x-source-platform"] = `${(_f = this.config.platform) == null ? void 0 : _f.name} | ${(_g = this.config.platform) == null ? void 0 : _g.version}`;
      }
      this.http = Axios.create(request);
      this.http.interceptors.request.use((req) => {
        this.emit("request", req);
        return req;
      });
      this.http.interceptors.response.use((res) => {
        this.emit("response", res);
        if (res.config.url && this.isVideoUrl(res.config.url)) {
          return res.data && res.data.data;
        }
        return res.data;
      }, (errorRes) => Promise.reject(errorRes.response && errorRes.response.data.error || errorRes));
    }
  }
  isVideoUrl(url) {
    return url.startsWith(`/video/v1/`);
  }
  set config(options) {
    this._config = {
      baseUrl: "https://api.mux.com",
      ...options
    };
  }
  get config() {
    return this._config;
  }
  set tokenId(token) {
    const v = token || process.env.MUX_TOKEN_ID;
    if (!v || v.length === 0) {
      throw new Error("API Access Token must be provided.");
    }
    this._tokenId = v;
  }
  get tokenId() {
    return this._tokenId;
  }
  set tokenSecret(secret) {
    const v = secret || process.env.MUX_TOKEN_SECRET;
    if (!v || v.length === 0) {
      throw new Error("API secret key must be provided");
    }
    this._tokenSecret = v;
  }
  get tokenSecret() {
    return this._tokenSecret;
  }
};

// src/data/resources/errors.ts
var PATH = "/data/v1/errors";
var Errors = class extends Base {
  list(params) {
    return this.http.get(PATH, { params });
  }
};

// src/data/resources/exports.ts
var PATH2 = "/data/v1/exports";
var Exports = class extends Base {
  list() {
    return this.http.get(PATH2);
  }
};

// src/data/resources/filters.ts
var PATH3 = "/data/v1/filters";
var Filters = class extends Base {
  get(filterId, params) {
    process.emitWarning("The Filter API has been deprecated, please use Dimension instead", "DeprecatedWarning");
    if (!filterId) {
      throw new Error("Filter Id is required to get filter information.");
    }
    return this.http.get(`${PATH3}/${filterId}`, { params });
  }
  list() {
    process.emitWarning("The Filter API has been deprecated, please use Dimension instead", "DeprecatedWarning");
    return this.http.get(PATH3);
  }
};

// src/data/resources/dimensions.ts
var PATH4 = "/data/v1/dimensions";
var Dimensions = class extends Base {
  get(dimensionId, params) {
    if (!dimensionId) {
      throw new Error("Dimension Id is required to get dimension information.");
    }
    return this.http.get(`${PATH4}/${dimensionId}`, { params });
  }
  list() {
    return this.http.get(PATH4);
  }
};

// src/data/resources/incidents.ts
var PATH5 = "/data/v1/incidents";
var Incidents = class extends Base {
  list(params) {
    return this.http.get(PATH5, { params });
  }
  get(incidentId) {
    if (!incidentId) {
      throw new Error("An incident id is required for incident details.");
    }
    return this.http.get(`${PATH5}/${incidentId}`);
  }
  related(incidentId, params) {
    if (!incidentId) {
      throw new Error("An incident id is required for related incidents.");
    }
    return this.http.get(`${PATH5}/${incidentId}/related`, { params });
  }
};

// src/data/resources/metrics.ts
var PATH6 = "/data/v1/metrics";
var Metrics = class extends Base {
  breakdown(metricId, params) {
    return this.http.get(`${PATH6}/${metricId}/breakdown`, { params });
  }
  comparison(params) {
    if (!params || params && !params.value) {
      throw new Error("The value query parameter is required for comparing metrics");
    }
    return this.http.get(`${PATH6}/comparison`, { params });
  }
  insights(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for insight metrics.");
    }
    return this.http.get(`${PATH6}/${metricId}/insights`, { params });
  }
  overall(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for overall metrics.");
    }
    return this.http.get(`${PATH6}/${metricId}/overall`, { params });
  }
  timeseries(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for timeseries metrics.");
    }
    return this.http.get(`${PATH6}/${metricId}/timeseries`, { params });
  }
};

// src/data/resources/real_time.ts
var PATH7 = "/data/v1/realtime";
var RealTime = class extends Base {
  dimensions() {
    return this.http.get(`${PATH7}/dimensions`);
  }
  metrics() {
    return this.http.get(`${PATH7}/metrics`);
  }
  breakdown(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for real-time breakdown information");
    }
    if (!params || params && !params.dimension) {
      throw new Error("The dimension query parameter is required for real-time breakdown information");
    }
    return this.http.get(`${PATH7}/metrics/${metricId}/breakdown`, { params });
  }
  histogramTimeseries(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for real-time histogram timeseries information");
    }
    return this.http.get(`${PATH7}/metrics/${metricId}/histogram-timeseries`, {
      params
    });
  }
  timeseries(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for real-time timeseries information.");
    }
    return this.http.get(`${PATH7}/metrics/${metricId}/timeseries`, {
      params
    });
  }
};

// src/data/resources/monitoring.ts
var PATH8 = "/data/v1/monitoring";
var Monitoring = class extends Base {
  dimensions() {
    return this.http.get(`${PATH8}/dimensions`);
  }
  metrics() {
    return this.http.get(`${PATH8}/metrics`);
  }
  breakdown(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for monitoring breakdown information");
    }
    if (!params || params && !params.dimension) {
      throw new Error("The dimension query parameter is required for monitoring breakdown information");
    }
    return this.http.get(`${PATH8}/metrics/${metricId}/breakdown`, { params });
  }
  histogramTimeseries(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for monitoring histogram timeseries information");
    }
    return this.http.get(`${PATH8}/metrics/${metricId}/histogram-timeseries`, {
      params
    });
  }
  timeseries(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for monitoring timeseries information.");
    }
    return this.http.get(`${PATH8}/metrics/${metricId}/timeseries`, {
      params
    });
  }
};

// src/data/resources/video_views.ts
var PATH9 = "/data/v1/video-views";
var VideoViews = class extends Base {
  list(params) {
    return this.http.get(PATH9, { params });
  }
  get(videoViewId) {
    if (!videoViewId) {
      throw new Error("A video view Id is required for video view details.");
    }
    return this.http.get(`${PATH9}/${videoViewId}`);
  }
};

// src/data/data.ts
var Data = class extends Base {
  constructor(accessTokenOrConfigOrBase, secret, config) {
    var __super = (...args) => {
      super(...args);
    };
    if (accessTokenOrConfigOrBase instanceof Base) {
      __super(accessTokenOrConfigOrBase);
    } else if (typeof accessTokenOrConfigOrBase === "object") {
      __super(accessTokenOrConfigOrBase);
    } else {
      __super(accessTokenOrConfigOrBase, secret, config);
    }
    this.Errors = new Errors(this);
    this.Exports = new Exports(this);
    this.Filters = new Filters(this);
    this.Dimensions = new Dimensions(this);
    this.Incidents = new Incidents(this);
    this.Metrics = new Metrics(this);
    this.RealTime = new RealTime(this);
    this.Monitoring = new Monitoring(this);
    this.VideoViews = new VideoViews(this);
  }
};
export {
  Data
};
/*!
 * Mux Data
 * Copyright(c) 2022 Mux Inc.
 */
/*!
 * Mux Dimensions
 * Copyright(c) 2022 Mux Inc.
 */
/*!
 * Mux Errors
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Exports
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Filters
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Incidents
 * Copyright(c) 2019 Mux Inc.
 */
/*!
 * Mux Metrics
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Monitoring
 * Copyright(c) 2020 Mux Inc.
 */
/*!
 * Mux Real-Time
 * Copyright(c) 2020 Mux Inc.
 */
/*!
 * Mux Video Views
 * Copyright(c) 2018 Mux Inc.
 */
//# sourceMappingURL=data.mjs.map