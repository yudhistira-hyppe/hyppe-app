{"version":3,"sources":["../../../src/base.ts","../../../src/version.ts","../../../src/data/resources/monitoring.ts"],"sourcesContent":["/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_config\", \"_tokenId\", \"_tokenSecret\"] }] */\n\nimport Axios, { AxiosInstance } from 'axios';\nimport EventEmitter from 'events';\n\nimport { RequestOptions, RequestParams } from './RequestOptions.js';\nimport { VERSION } from './version.js';\n\n/**\n * Mux Base Class - Simple base class to be extended by all child modules.\n *\n * @ignore\n * @property {string} tokenId - The ID for the access token.\n * @property {string} tokenSecret - The secret for the access token.\n * @property {object} config - The configuration for the Base object.\n * @property {Object} requestOptions - The HTTP request options for Mux Assets\n * @property {string} requestOptions.auth.username - HTTP basic auth username (access token)\n * @property {string} requestOptions.auth.password - HTTP basic auth password (secret)\n *\n */\nexport class Base extends EventEmitter {\n  readonly http: AxiosInstance;\n\n  private _tokenId!: string;\n  private _tokenSecret!: string;\n  private _config!: RequestOptions;\n\n  constructor(muxBase: Base);\n  constructor(requestOptions: RequestOptions);\n  constructor(tokenId: string, tokenSecret: string);\n  constructor(tokenId: string, tokenSecret: string, config: RequestOptions);\n  constructor(\n    tokenIdOrOptionsOrBase: string | RequestOptions | Base,\n    tokenSecret?: string,\n    config?: RequestOptions\n  ) {\n    super();\n\n    if (tokenIdOrOptionsOrBase instanceof Base) {\n      // we could do this with Object.assign but I'd rather we be really explicit about what we copy.\n      this.config = tokenIdOrOptionsOrBase._config;\n      this._tokenId = tokenIdOrOptionsOrBase._tokenId;\n      this._tokenSecret = tokenIdOrOptionsOrBase._tokenSecret;\n\n      this.http = tokenIdOrOptionsOrBase.http;\n    } else {\n      if (\n        typeof tokenIdOrOptionsOrBase === 'object' &&\n        !(tokenIdOrOptionsOrBase instanceof Base)\n      ) {\n        this.config = tokenIdOrOptionsOrBase;\n        this.tokenId = undefined;\n        this.tokenSecret = undefined;\n      } else {\n        // without 'as' this complains of Base | string typing, but we have ruled out the Base case implicitly\n        this.tokenId = tokenIdOrOptionsOrBase as string;\n        this.tokenSecret = tokenSecret;\n        this.config = config ?? {};\n      }\n\n      const request: RequestParams = {\n        baseURL: this.config.baseUrl,\n        headers: {\n          'User-Agent': `Mux Node | ${VERSION}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        withCredentials: false,\n        auth: {\n          username: this._tokenId,\n          password: this._tokenSecret,\n        },\n      };\n\n      if (this.config.platform?.name) {\n        if (this.config.platform?.name?.includes('|')) {\n          throw new Error('Platform name cannot contain a \"|\" value.');\n        }\n\n        if (this.config.platform?.version?.includes('|')) {\n          throw new Error('Platform version cannot contain a \"|\" value.');\n        }\n\n        request.headers[\n          'x-source-platform'\n        ] = `${this.config.platform?.name} | ${this.config.platform?.version}`;\n      }\n\n      this.http = Axios.create(request);\n\n      this.http.interceptors.request.use((req: any) => {\n        this.emit('request', req);\n\n        return req;\n      });\n\n      this.http.interceptors.response.use(\n        (res: any) => {\n          this.emit('response', res);\n          if (res.config.url && this.isVideoUrl(res.config.url)) {\n            return res.data && res.data.data;\n          }\n\n          return res.data;\n        },\n        (errorRes: any) =>\n          Promise.reject(\n            (errorRes.response && errorRes.response.data.error) || errorRes\n          )\n      );\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isVideoUrl(url: string) {\n    return url.startsWith(`/video/v1/`);\n  }\n\n  set config(options: RequestOptions) {\n    this._config = {\n      baseUrl: 'https://api.mux.com',\n      ...options,\n    };\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  set tokenId(token: string | undefined) {\n    const v = token || process.env.MUX_TOKEN_ID;\n    if (!v || v.length === 0) {\n      throw new Error('API Access Token must be provided.');\n    }\n\n    this._tokenId = v;\n  }\n\n  get tokenId() {\n    return this._tokenId;\n  }\n\n  set tokenSecret(secret: string | undefined) {\n    const v = secret || process.env.MUX_TOKEN_SECRET;\n    if (!v || v.length === 0) {\n      throw new Error('API secret key must be provided');\n    }\n\n    this._tokenSecret = v;\n  }\n\n  get tokenSecret() {\n    return this._tokenSecret;\n  }\n}\n","export const VERSION = '7.3.0' as const;\n","/*!\n * Mux Monitoring\n * Copyright(c) 2020 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport {\n  MonitoringBreakdownQueryParams,\n  MonitoringBreakdownResponse,\n  MonitoringDimensionsResponse,\n  MonitoringHistogramQueryParams,\n  MonitoringHistogramResponse,\n  MonitoringMetricsResponse,\n  MonitoringTimeseriesParams,\n  MonitoringTimeseriesResponse,\n} from '../domain.js';\n\n/**\n * @private Base monitoring path for the Mux API\n * */\nconst PATH = '/data/v1/monitoring';\n\n/**\n * Monitoring Class - Provides access to the Mux Data Monitoring API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of available monitoring dimensions\n * Data.Monitoring.dimensions();\n */\nexport class Monitoring extends Base {\n  /**\n   * List of available monitoring dimensions\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available monitoring dimensions\n   * Data.Monitoring.dimensions();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-monitoring-dimensions\n   */\n  dimensions(): Promise<MonitoringDimensionsResponse> {\n    return this.http.get(`${PATH}/dimensions`);\n  }\n\n  /**\n   * List available monitoring metrics\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available monitoring metrics\n   * Data.Monitoring.metrics();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-monitoring-metrics\n   */\n  metrics(): Promise<MonitoringMetricsResponse> {\n    return this.http.get(`${PATH}/metrics`);\n  }\n\n  /**\n   * Get breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#monitoring-get-1 for a list of all metric ids\n   * @param {Object} params - example { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown information for current-concurrent-viewers by ASN for a specific time for the Windows operating system in the US\n   * Data.Monitoring.breakdown('current-concurrent-viewers', { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-monitoring-breakdown\n   */\n  breakdown(\n    metricId: string,\n    params?: MonitoringBreakdownQueryParams\n  ): Promise<MonitoringBreakdownResponse> {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for monitoring breakdown information'\n      );\n    }\n\n    if (!params || (params && !params.dimension)) {\n      throw new Error(\n        'The dimension query parameter is required for monitoring breakdown information'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/breakdown`, { params });\n  }\n\n  /**\n   * List histogram timeseries information for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#monitoring-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List histogram timeseries information for video-startup-time for the Windows operating system in the US\n   * Data.Monitoring.histogramTimeseries('video-startup-time', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-monitoring-histogram-timeseries\n   */\n  histogramTimeseries(\n    metricId: string,\n    params?: MonitoringHistogramQueryParams\n  ): Promise<MonitoringHistogramResponse> {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for monitoring histogram timeseries information'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/histogram-timeseries`, {\n      params,\n    });\n  }\n\n  /**\n   * List timeseries information for a specific metric along with the number of concurrent viewers.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#monitoring-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US\n   * Data.Monitoring.timeseries('playback-failure-percentage', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-monitoring-timeseries\n   */\n  timeseries(\n    metricId: string,\n    params?: MonitoringTimeseriesParams\n  ): Promise<MonitoringTimeseriesResponse> {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for monitoring timeseries information.'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/timeseries`, {\n      params,\n    });\n  }\n}\n"],"mappings":"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","names":[]}