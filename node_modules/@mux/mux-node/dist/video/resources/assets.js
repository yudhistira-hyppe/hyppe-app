"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/video/resources/assets.ts
var assets_exports = {};
__export(assets_exports, {
  Assets: () => Assets
});
module.exports = __toCommonJS(assets_exports);

// src/base.ts
var import_axios = __toESM(require("axios"));
var import_events = __toESM(require("events"));

// src/version.ts
var VERSION = "7.3.0";

// src/base.ts
var Base = class extends import_events.default {
  constructor(tokenIdOrOptionsOrBase, tokenSecret, config) {
    var _a, _b, _c, _d, _e, _f, _g;
    super();
    if (tokenIdOrOptionsOrBase instanceof Base) {
      this.config = tokenIdOrOptionsOrBase._config;
      this._tokenId = tokenIdOrOptionsOrBase._tokenId;
      this._tokenSecret = tokenIdOrOptionsOrBase._tokenSecret;
      this.http = tokenIdOrOptionsOrBase.http;
    } else {
      if (typeof tokenIdOrOptionsOrBase === "object" && !(tokenIdOrOptionsOrBase instanceof Base)) {
        this.config = tokenIdOrOptionsOrBase;
        this.tokenId = void 0;
        this.tokenSecret = void 0;
      } else {
        this.tokenId = tokenIdOrOptionsOrBase;
        this.tokenSecret = tokenSecret;
        this.config = config ?? {};
      }
      const request = {
        baseURL: this.config.baseUrl,
        headers: {
          "User-Agent": `Mux Node | ${VERSION}`,
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        withCredentials: false,
        auth: {
          username: this._tokenId,
          password: this._tokenSecret
        }
      };
      if ((_a = this.config.platform) == null ? void 0 : _a.name) {
        if ((_c = (_b = this.config.platform) == null ? void 0 : _b.name) == null ? void 0 : _c.includes("|")) {
          throw new Error('Platform name cannot contain a "|" value.');
        }
        if ((_e = (_d = this.config.platform) == null ? void 0 : _d.version) == null ? void 0 : _e.includes("|")) {
          throw new Error('Platform version cannot contain a "|" value.');
        }
        request.headers["x-source-platform"] = `${(_f = this.config.platform) == null ? void 0 : _f.name} | ${(_g = this.config.platform) == null ? void 0 : _g.version}`;
      }
      this.http = import_axios.default.create(request);
      this.http.interceptors.request.use((req) => {
        this.emit("request", req);
        return req;
      });
      this.http.interceptors.response.use((res) => {
        this.emit("response", res);
        if (res.config.url && this.isVideoUrl(res.config.url)) {
          return res.data && res.data.data;
        }
        return res.data;
      }, (errorRes) => Promise.reject(errorRes.response && errorRes.response.data.error || errorRes));
    }
  }
  isVideoUrl(url) {
    return url.startsWith(`/video/v1/`);
  }
  set config(options) {
    this._config = {
      baseUrl: "https://api.mux.com",
      ...options
    };
  }
  get config() {
    return this._config;
  }
  set tokenId(token) {
    const v = token || process.env.MUX_TOKEN_ID;
    if (!v || v.length === 0) {
      throw new Error("API Access Token must be provided.");
    }
    this._tokenId = v;
  }
  get tokenId() {
    return this._tokenId;
  }
  set tokenSecret(secret) {
    const v = secret || process.env.MUX_TOKEN_SECRET;
    if (!v || v.length === 0) {
      throw new Error("API secret key must be provided");
    }
    this._tokenSecret = v;
  }
  get tokenSecret() {
    return this._tokenSecret;
  }
};

// src/video/resources/assets.ts
var PATH = "/video/v1/assets";
var buildBasePath = (assetId) => `${PATH}/${assetId}`;
var Assets = class extends Base {
  create(params) {
    if (!params) {
      return Promise.reject(new Error("Params are required for creating an asset"));
    }
    return this.http.post(PATH, params);
  }
  async update(assetId, params) {
    if (!assetId || !params) {
      throw new Error("assetId and params are required.");
    }
    return this.http.patch(buildBasePath(assetId), params);
  }
  del(assetId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required to delete an asset"));
    }
    return this.http.delete(buildBasePath(assetId));
  }
  get(assetId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required to get an asset"));
    }
    return this.http.get(buildBasePath(assetId));
  }
  inputInfo(assetId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required to get input-info"));
    }
    return this.http.get(`${buildBasePath(assetId)}/input-info`);
  }
  list(params) {
    return this.http.get(PATH, { params });
  }
  playbackId(assetId, playbackId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!playbackId) {
      return Promise.reject(new Error("A playback ID is required"));
    }
    return this.http.get(`${buildBasePath(assetId)}/playback-ids/${playbackId}`);
  }
  createPlaybackId(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!params) {
      return Promise.reject(new Error("Playback ID params are required"));
    }
    return this.http.post(`${buildBasePath(assetId)}/playback-ids`, params);
  }
  deletePlaybackId(assetId, playbackId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!playbackId) {
      return Promise.reject(new Error("A playback ID is required"));
    }
    return this.http.delete(`${buildBasePath(assetId)}/playback-ids/${playbackId}`);
  }
  createTrack(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!params) {
      return Promise.reject(new Error("Text track params are required"));
    }
    return this.http.post(`${buildBasePath(assetId)}/tracks`, params);
  }
  deleteTrack(assetId, trackId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!trackId) {
      return Promise.reject(new Error("A track ID is required"));
    }
    return this.http.delete(`${buildBasePath(assetId)}/tracks/${trackId}`);
  }
  updateMp4Support(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!(params && params.mp4_support)) {
      return Promise.reject(new Error("params.mp4_support is required"));
    }
    return this.http.put(`${buildBasePath(assetId)}/mp4-support`, params);
  }
  updateMasterAccess(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!(params && params.master_access)) {
      return Promise.reject(new Error("params.master_access is required"));
    }
    return this.http.put(`${buildBasePath(assetId)}/master-access`, params);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Assets
});
/*!
 * Mux Assets
 * Copyright(c) 2018 Mux Inc.
 */
module.exports = module.exports.default || module.exports;
//# sourceMappingURL=assets.js.map