{"version":3,"sources":["../../../src/base.ts","../../../src/version.ts","../../../src/video/resources/assets.ts"],"sourcesContent":["/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_config\", \"_tokenId\", \"_tokenSecret\"] }] */\n\nimport Axios, { AxiosInstance } from 'axios';\nimport EventEmitter from 'events';\n\nimport { RequestOptions, RequestParams } from './RequestOptions.js';\nimport { VERSION } from './version.js';\n\n/**\n * Mux Base Class - Simple base class to be extended by all child modules.\n *\n * @ignore\n * @property {string} tokenId - The ID for the access token.\n * @property {string} tokenSecret - The secret for the access token.\n * @property {object} config - The configuration for the Base object.\n * @property {Object} requestOptions - The HTTP request options for Mux Assets\n * @property {string} requestOptions.auth.username - HTTP basic auth username (access token)\n * @property {string} requestOptions.auth.password - HTTP basic auth password (secret)\n *\n */\nexport class Base extends EventEmitter {\n  readonly http: AxiosInstance;\n\n  private _tokenId!: string;\n  private _tokenSecret!: string;\n  private _config!: RequestOptions;\n\n  constructor(muxBase: Base);\n  constructor(requestOptions: RequestOptions);\n  constructor(tokenId: string, tokenSecret: string);\n  constructor(tokenId: string, tokenSecret: string, config: RequestOptions);\n  constructor(\n    tokenIdOrOptionsOrBase: string | RequestOptions | Base,\n    tokenSecret?: string,\n    config?: RequestOptions\n  ) {\n    super();\n\n    if (tokenIdOrOptionsOrBase instanceof Base) {\n      // we could do this with Object.assign but I'd rather we be really explicit about what we copy.\n      this.config = tokenIdOrOptionsOrBase._config;\n      this._tokenId = tokenIdOrOptionsOrBase._tokenId;\n      this._tokenSecret = tokenIdOrOptionsOrBase._tokenSecret;\n\n      this.http = tokenIdOrOptionsOrBase.http;\n    } else {\n      if (\n        typeof tokenIdOrOptionsOrBase === 'object' &&\n        !(tokenIdOrOptionsOrBase instanceof Base)\n      ) {\n        this.config = tokenIdOrOptionsOrBase;\n        this.tokenId = undefined;\n        this.tokenSecret = undefined;\n      } else {\n        // without 'as' this complains of Base | string typing, but we have ruled out the Base case implicitly\n        this.tokenId = tokenIdOrOptionsOrBase as string;\n        this.tokenSecret = tokenSecret;\n        this.config = config ?? {};\n      }\n\n      const request: RequestParams = {\n        baseURL: this.config.baseUrl,\n        headers: {\n          'User-Agent': `Mux Node | ${VERSION}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        withCredentials: false,\n        auth: {\n          username: this._tokenId,\n          password: this._tokenSecret,\n        },\n      };\n\n      if (this.config.platform?.name) {\n        if (this.config.platform?.name?.includes('|')) {\n          throw new Error('Platform name cannot contain a \"|\" value.');\n        }\n\n        if (this.config.platform?.version?.includes('|')) {\n          throw new Error('Platform version cannot contain a \"|\" value.');\n        }\n\n        request.headers[\n          'x-source-platform'\n        ] = `${this.config.platform?.name} | ${this.config.platform?.version}`;\n      }\n\n      this.http = Axios.create(request);\n\n      this.http.interceptors.request.use((req: any) => {\n        this.emit('request', req);\n\n        return req;\n      });\n\n      this.http.interceptors.response.use(\n        (res: any) => {\n          this.emit('response', res);\n          if (res.config.url && this.isVideoUrl(res.config.url)) {\n            return res.data && res.data.data;\n          }\n\n          return res.data;\n        },\n        (errorRes: any) =>\n          Promise.reject(\n            (errorRes.response && errorRes.response.data.error) || errorRes\n          )\n      );\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isVideoUrl(url: string) {\n    return url.startsWith(`/video/v1/`);\n  }\n\n  set config(options: RequestOptions) {\n    this._config = {\n      baseUrl: 'https://api.mux.com',\n      ...options,\n    };\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  set tokenId(token: string | undefined) {\n    const v = token || process.env.MUX_TOKEN_ID;\n    if (!v || v.length === 0) {\n      throw new Error('API Access Token must be provided.');\n    }\n\n    this._tokenId = v;\n  }\n\n  get tokenId() {\n    return this._tokenId;\n  }\n\n  set tokenSecret(secret: string | undefined) {\n    const v = secret || process.env.MUX_TOKEN_SECRET;\n    if (!v || v.length === 0) {\n      throw new Error('API secret key must be provided');\n    }\n\n    this._tokenSecret = v;\n  }\n\n  get tokenSecret() {\n    return this._tokenSecret;\n  }\n}\n","export const VERSION = '7.3.0' as const;\n","/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport {\n  Asset,\n  CreateAssetParams,\n  CreatePlaybackIdParams,\n  CreateTrackParams,\n  InputInfo,\n  ListAssetParams,\n  PlaybackId,\n  Track,\n  UpdateAssetParams,\n  UpdateMasterAccessParams,\n  UpdateMp4SupportParams,\n} from '../domain.js';\n\n/**\n * @private Base asset path for the Mux API\n * */\nconst PATH = '/video/v1/assets';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = (assetId: string) => `${PATH}/${assetId}`;\n\n/**\n * Assets Class - Provides access to the Mux Video Assets API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an asset\n * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n */\nexport class Assets extends Base {\n  /**\n   * Creates a Mux asset with the specified JSON parameters\n   * @param {Object} params - Asset JSON parameters (e.g input)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset\n   * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset\n   */\n  create(params: CreateAssetParams): Promise<Asset> {\n    if (!params) {\n      return Promise.reject(\n        new Error('Params are required for creating an asset')\n      );\n    }\n\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Updates an existing asset with new parameters.\n   *\n   * @param {string} assetId - the ID of the asset\n   * @param {Object} params - Asset JSON parameters (e.g passthrough)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   */\n  async update(assetId: string, params: UpdateAssetParams): Promise<Asset> {\n    if (!assetId || !params) {\n      throw new Error('assetId and params are required.');\n    }\n\n    return this.http.patch(buildBasePath(assetId), params);\n  }\n\n  /**\n   * Deletes a Mux asset\n   * @param {string} assetId - The ID for the asset intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset\n   * Video.Assets.del(assetId);\n   *\n   * @see hhttps://docs.mux.com/api-reference/video#operation/delete-asset\n   */\n  del(assetId: string): Promise<any> {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to delete an asset')\n      );\n    }\n    return this.http.delete(buildBasePath(assetId));\n  }\n\n  /**\n   * Get an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.Assets.get(assetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset\n   */\n  get(assetId: string): Promise<Asset> {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to get an asset')\n      );\n    }\n    return this.http.get(buildBasePath(assetId));\n  }\n\n  /**\n   * Get input info for an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get input info for an asset\n   * Video.Assets.inputInfo(assetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-input-info\n   */\n  inputInfo(assetId: string): Promise<Array<InputInfo>> {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to get input-info')\n      );\n    }\n    return this.http.get(`${buildBasePath(assetId)}/input-info`);\n  }\n\n  /**\n   * List all assets for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all assets for a Mux Environment\n   * Video.Assets.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-assets\n   */\n  list(params: ListAssetParams): Promise<Array<Asset>> {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Return an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the playbackId\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Retrieve an asset playbackId\n   * Video.Assets.playbackId(assetId, playbackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-playback-id\n   */\n  playbackId(assetId: string, playbackId: string): Promise<PlaybackId> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.get(\n      `${buildBasePath(assetId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - Asset JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset playback ID\n   * Video.Assets.createPlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset-playback-id\n   */\n  createPlaybackId(\n    assetId: string,\n    params: CreatePlaybackIdParams\n  ): Promise<PlaybackId> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Playback ID params are required'));\n    }\n    return this.http.post(`${buildBasePath(assetId)}/playback-ids`, params);\n  }\n\n  /**\n   * Delete an asset playback ID\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the asset playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset playback ID\n   * Video.Assets.deletePlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-asset-playback-id\n   */\n  deletePlaybackId(assetId: string, playbackId: string): Promise<any> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.delete(\n      `${buildBasePath(assetId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create a subtitle text track\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - subtitle text track JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset text track\n   * Video.Assets.createTrack(assetId, {\n   *   url: \"https://example.com/myVIdeo_en.srt\",\n   *   type: \"text\",\n   *   text_type: \"subtitles\",\n   *   language_code: \"en-US\",\n   * });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset-track\n   */\n  createTrack(assetId: string, params: CreateTrackParams): Promise<Track> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Text track params are required'));\n    }\n    return this.http.post(`${buildBasePath(assetId)}/tracks`, params);\n  }\n\n  /**\n   * Delete an asset text track\n   * @param {string} assetId - The ID for the asset\n   * @param {string} trackId - The ID for the asset text track to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset text track\n   * Video.Assets.deleteTrack(assetId, trackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-asset-track\n   */\n  deleteTrack(assetId: string, trackId: string): Promise<any> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!trackId) {\n      return Promise.reject(new Error('A track ID is required'));\n    }\n    return this.http.delete(`${buildBasePath(assetId)}/tracks/${trackId}`);\n  }\n\n  /**\n   * Update mp4 support for an asset\n   * @param {Object} params - mp4 support JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Updates mp4 support for an asset\n   * Video.Assets.updateMp4Support(assetId, {mp4_support: \"standard\"});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/update-asset-mp4-support\n   */\n  updateMp4Support(\n    assetId: string,\n    params: UpdateMp4SupportParams\n  ): Promise<Asset> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!(params && params.mp4_support)) {\n      return Promise.reject(new Error('params.mp4_support is required'));\n    }\n    return this.http.put(`${buildBasePath(assetId)}/mp4-support`, params);\n  }\n\n  /**\n   * Update master access for an asset\n   * @param {Object} params - master access JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Update master access for an asset\n   * Video.Assets.updateMasterAccess(assetId, {master_access: \"temporary\"});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/update-asset-master-access\n   */\n  updateMasterAccess(\n    assetId: string,\n    params: UpdateMasterAccessParams\n  ): Promise<Asset> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!(params && params.master_access)) {\n      return Promise.reject(new Error('params.master_access is required'));\n    }\n    return this.http.put(`${buildBasePath(assetId)}/master-access`, params);\n  }\n}\n"],"mappings":"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","names":[]}