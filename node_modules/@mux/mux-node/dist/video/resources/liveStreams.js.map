{"version":3,"sources":["../../../src/video/resources/liveStreams.ts","../../../src/base.ts","../../../src/version.ts"],"sourcesContent":["/*!\n * Mux Live Streams\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport {\n  CreateLiveStreamParams,\n  CreatePlaybackIdParams,\n  ListLiveStreamParams,\n  LiveStream,\n  PlaybackId,\n  SimulcastTarget,\n  SimulcastTargetParams,\n  UpdateLiveStreamEmbeddedSubtitlesParams,\n  UpdateLiveStreamGeneratedSubtitlesParams,\n  UpdateLiveStreamParams,\n} from '../domain.js';\n\n/**\n * @private Base live stream path for the Mux API\n * */\nconst PATH = '/video/v1/live-streams';\n\n/**\n * @private\n * Build the base live stream path for the Mux API\n * */\nconst buildBasePath = (liveStreamId: string) => `${PATH}/${liveStreamId}`;\n\n/**\n * Live Streams Class - Provides access to the Mux Video Live Streams API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video } = muxClient;\n *\n * // Create a live stream\n * Video.LiveStreams.create({\n *  playback_policy: 'public',\n *  new_asset_settings: { playback_policy: 'public' }\n * });\n */\nexport class LiveStreams extends Base {\n  /**\n   * Creates a Mux live stream with the specified JSON parameters\n   * @param {Object} params - Live Stream JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a live stream\n   * Video.LiveStreams.create({\n   *  playback_policy: 'public',\n   *  new_asset_settings: { playback_policy: 'public' }\n   * });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream\n   */\n  create(params: CreateLiveStreamParams): Promise<LiveStream> {\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Updates an existing livestream with new parameters.\n   *\n   * @param {string} liveStreamId - the ID of the live stream\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   */\n  async update(\n    liveStreamId: string,\n    params: UpdateLiveStreamParams\n  ): Promise<LiveStream> {\n    if (!liveStreamId || !params) {\n      throw new Error('assetId and params are required.');\n    }\n\n    return this.http.patch(buildBasePath(liveStreamId), params);\n  }\n\n  /**\n   * Deletes a Mux Live Stream\n   * @param {string} liveStreamId - The ID for the live stream intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a mux live stream\n   * Video.LiveStreams.del(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream\n   */\n  del(liveStreamId: string): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to delete a live stream')\n      );\n    }\n    return this.http.delete(buildBasePath(liveStreamId));\n  }\n\n  /**\n   * Get an Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live stream\n   * Video.LiveStreams.get(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-live-stream\n   */\n  get(liveStreamId: string): Promise<LiveStream> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to get a live stream')\n      );\n    }\n    return this.http.get(buildBasePath(liveStreamId));\n  }\n\n  /**\n   * List all live streams for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all live streams for a Mux Environment\n   * Video.LiveStreams.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-live-streams\n   */\n  list(params: ListLiveStreamParams): Promise<Array<LiveStream>> {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Signal a live stream is finished\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Signal a live stream is finished\n   * Video.LiveStreams.signalComplete(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/signal-live-stream-complete\n   */\n  signalComplete(liveStreamId: string): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to signal a stream is complete')\n      );\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/complete`);\n  }\n\n  /**\n   * Reset a stream key\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Reset a live stream key if you want to immediately stop the current stream key\n   * // from working and create a new stream key that can be used for future broadcasts.\n   * Video.LiveStreams.resetStreamKey(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/reset-stream-key\n   */\n  resetStreamKey(liveStreamId: string): Promise<LiveStream> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to reset a live stream key')\n      );\n    }\n    return this.http.post(`${buildBasePath(liveStreamId)}/reset-stream-key`);\n  }\n\n  /**\n   * Create a live stream playback id\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live stream playback ID\n   * Video.LiveStreams.createPlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-playback-id\n   */\n  createPlaybackId(\n    liveStreamId: string,\n    params: CreatePlaybackIdParams\n  ): Promise<PlaybackId> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error(\n          'A live stream ID is required to create a live stream playback ID'\n        )\n      );\n    }\n\n    if (!params) {\n      return Promise.reject(\n        new Error(\n          'A playback policy is required to create a live stream playback ID'\n        )\n      );\n    }\n    return this.http.post(\n      `${buildBasePath(liveStreamId)}/playback-ids`,\n      params\n    );\n  }\n\n  /**\n   * Delete a live stream playback ID\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} playbackId - The ID for the live stream playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a live stream playback ID\n   * Video.LiveStreams.deletePlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-playback-id\n   */\n  deletePlaybackId(liveStreamId: string, playbackId: string): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error(\n          'A live stream ID is required to delete a live stream playback ID'\n        )\n      );\n    }\n\n    if (!playbackId) {\n      return Promise.reject(\n        new Error(\n          'A live stream playback ID is required to delete a live stream playback ID'\n        )\n      );\n    }\n    return this.http.delete(\n      `${buildBasePath(liveStreamId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Return a live stream playback id\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} playbackId - The ID for the playbackId\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-playback-id\n   */\n  playbackId(liveStreamId: string, playbackId: string): Promise<PlaybackId> {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.get(\n      `${buildBasePath(liveStreamId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Simulcast Target JSON parameters (e.g url and stream_key)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live simulcast target\n   * Video.LiveStreams.createSimulcastTarget(liveStreamId, {url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi', passthrough: 'Example Live Streaming service'});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-simulcast-target\n   */\n  createSimulcastTarget(\n    liveStreamId: string,\n    params: SimulcastTargetParams\n  ): Promise<SimulcastTarget> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to create a simulcast target')\n      );\n    }\n\n    if (!(params && params.url)) {\n      return Promise.reject(\n        new Error('A url is required to create a simulcast target')\n      );\n    }\n    return this.http.post(\n      `${buildBasePath(liveStreamId)}/simulcast-targets`,\n      params\n    );\n  }\n\n  /**\n   * Get a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live simulcast target\n   * Video.LiveStreams.getSimulcastTarget(liveStreamId, simulcastTargetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-live-stream-simulcast-target\n   */\n  getSimulcastTarget(\n    liveStreamId: string,\n    simulcastTargetId: string\n  ): Promise<SimulcastTarget> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to get a simulcast target')\n      );\n    }\n\n    if (!simulcastTargetId) {\n      return Promise.reject(\n        new Error('A simulcast target ID is required to get a simulcast target')\n      );\n    }\n    return this.http.get(\n      `${buildBasePath(liveStreamId)}/simulcast-targets/${simulcastTargetId}`\n    );\n  }\n\n  /**\n   * Delete a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a simulcast target\n   * Video.LiveStreams.deleteSimulcastTarget(liveStreamId, simulcastTargetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-simulcast-target\n   */\n  deleteSimulcastTarget(\n    liveStreamId: string,\n    simulcastTargetId: string\n  ): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to delete a simulcast target')\n      );\n    }\n\n    if (!simulcastTargetId) {\n      return Promise.reject(\n        new Error(\n          'A simulcast target ID is required to delete a simulcast target'\n        )\n      );\n    }\n    return this.http.delete(\n      `${buildBasePath(liveStreamId)}/simulcast-targets/${simulcastTargetId}`\n    );\n  }\n\n  /**\n   * Configures a live stream to receive embedded closed captions.\n   * The resulting Asset's subtitle text track will have `closed_captions: true` set.\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} params - Embedded subtitles parameters.\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   */\n  async updateEmbeddedSubtitles(\n    liveStreamId: string,\n    params: UpdateLiveStreamEmbeddedSubtitlesParams\n  ): Promise<LiveStream> {\n    if (!liveStreamId || !params) {\n      throw new Error('liveStreamId and params are required.');\n    }\n\n    return this.http.put(\n      `${buildBasePath(liveStreamId)}/embedded-subtitles`,\n      params\n    );\n  }\n\n  /**\n   * Configures a live stream to receive generated closed captions.\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} params - Generated subtitles parameters.\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   */\n  async updateGeneratedSubtitles(\n    liveStreamId: string,\n    params: UpdateLiveStreamGeneratedSubtitlesParams\n  ): Promise<LiveStream> {\n    if (!liveStreamId || !params) {\n      throw new Error('liveStreamId and params are required.');\n    }\n\n    return this.http.put(\n      `${buildBasePath(liveStreamId)}/generated-subtitles`,\n      params\n    );\n  }\n\n  /**\n   * Disable a Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Disable a live stream\n   * Video.LiveStreams.disable(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/disable-live-stream\n   */\n  disable(liveStreamId: string): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to disable a live stream')\n      );\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/disable`);\n  }\n\n  /**\n   * Enable a Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Enable a Live Stream\n   * Video.LiveStreams.enable(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/enable-live-stream\n   */\n  enable(liveStreamId: string): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to enable a live stream')\n      );\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/enable`);\n  }\n}\n","/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_config\", \"_tokenId\", \"_tokenSecret\"] }] */\n\nimport Axios, { AxiosInstance } from 'axios';\nimport EventEmitter from 'events';\n\nimport { RequestOptions, RequestParams } from './RequestOptions.js';\nimport { VERSION } from './version.js';\n\n/**\n * Mux Base Class - Simple base class to be extended by all child modules.\n *\n * @ignore\n * @property {string} tokenId - The ID for the access token.\n * @property {string} tokenSecret - The secret for the access token.\n * @property {object} config - The configuration for the Base object.\n * @property {Object} requestOptions - The HTTP request options for Mux Assets\n * @property {string} requestOptions.auth.username - HTTP basic auth username (access token)\n * @property {string} requestOptions.auth.password - HTTP basic auth password (secret)\n *\n */\nexport class Base extends EventEmitter {\n  readonly http: AxiosInstance;\n\n  private _tokenId!: string;\n  private _tokenSecret!: string;\n  private _config!: RequestOptions;\n\n  constructor(muxBase: Base);\n  constructor(requestOptions: RequestOptions);\n  constructor(tokenId: string, tokenSecret: string);\n  constructor(tokenId: string, tokenSecret: string, config: RequestOptions);\n  constructor(\n    tokenIdOrOptionsOrBase: string | RequestOptions | Base,\n    tokenSecret?: string,\n    config?: RequestOptions\n  ) {\n    super();\n\n    if (tokenIdOrOptionsOrBase instanceof Base) {\n      // we could do this with Object.assign but I'd rather we be really explicit about what we copy.\n      this.config = tokenIdOrOptionsOrBase._config;\n      this._tokenId = tokenIdOrOptionsOrBase._tokenId;\n      this._tokenSecret = tokenIdOrOptionsOrBase._tokenSecret;\n\n      this.http = tokenIdOrOptionsOrBase.http;\n    } else {\n      if (\n        typeof tokenIdOrOptionsOrBase === 'object' &&\n        !(tokenIdOrOptionsOrBase instanceof Base)\n      ) {\n        this.config = tokenIdOrOptionsOrBase;\n        this.tokenId = undefined;\n        this.tokenSecret = undefined;\n      } else {\n        // without 'as' this complains of Base | string typing, but we have ruled out the Base case implicitly\n        this.tokenId = tokenIdOrOptionsOrBase as string;\n        this.tokenSecret = tokenSecret;\n        this.config = config ?? {};\n      }\n\n      const request: RequestParams = {\n        baseURL: this.config.baseUrl,\n        headers: {\n          'User-Agent': `Mux Node | ${VERSION}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        withCredentials: false,\n        auth: {\n          username: this._tokenId,\n          password: this._tokenSecret,\n        },\n      };\n\n      if (this.config.platform?.name) {\n        if (this.config.platform?.name?.includes('|')) {\n          throw new Error('Platform name cannot contain a \"|\" value.');\n        }\n\n        if (this.config.platform?.version?.includes('|')) {\n          throw new Error('Platform version cannot contain a \"|\" value.');\n        }\n\n        request.headers[\n          'x-source-platform'\n        ] = `${this.config.platform?.name} | ${this.config.platform?.version}`;\n      }\n\n      this.http = Axios.create(request);\n\n      this.http.interceptors.request.use((req: any) => {\n        this.emit('request', req);\n\n        return req;\n      });\n\n      this.http.interceptors.response.use(\n        (res: any) => {\n          this.emit('response', res);\n          if (res.config.url && this.isVideoUrl(res.config.url)) {\n            return res.data && res.data.data;\n          }\n\n          return res.data;\n        },\n        (errorRes: any) =>\n          Promise.reject(\n            (errorRes.response && errorRes.response.data.error) || errorRes\n          )\n      );\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isVideoUrl(url: string) {\n    return url.startsWith(`/video/v1/`);\n  }\n\n  set config(options: RequestOptions) {\n    this._config = {\n      baseUrl: 'https://api.mux.com',\n      ...options,\n    };\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  set tokenId(token: string | undefined) {\n    const v = token || process.env.MUX_TOKEN_ID;\n    if (!v || v.length === 0) {\n      throw new Error('API Access Token must be provided.');\n    }\n\n    this._tokenId = v;\n  }\n\n  get tokenId() {\n    return this._tokenId;\n  }\n\n  set tokenSecret(secret: string | undefined) {\n    const v = secret || process.env.MUX_TOKEN_SECRET;\n    if (!v || v.length === 0) {\n      throw new Error('API secret key must be provided');\n    }\n\n    this._tokenSecret = v;\n  }\n\n  get tokenSecret() {\n    return this._tokenSecret;\n  }\n}\n","export const VERSION = '7.3.0' as const;\n"],"mappings":"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","names":[]}