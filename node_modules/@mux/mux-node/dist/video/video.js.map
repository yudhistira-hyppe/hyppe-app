{"version":3,"sources":["../../src/video/video.ts","../../src/base.ts","../../src/version.ts","../../src/video/resources/assets.ts","../../src/video/resources/liveStreams.ts","../../src/video/resources/playbackIds.ts","../../src/video/resources/uploads.ts","../../src/video/resources/signingKeys.ts","../../src/video/resources/deliveryUsage.ts","../../src/video/resources/playbackRestrictions.ts","../../src/video/resources/spaces.ts","../../src/video/resources/transcriptionVocabularies.ts"],"sourcesContent":["/*!\n * Mux Video\n * Copyright(c) 2022 Mux Inc.\n */\n\nimport { Base } from '../base.js';\nimport { RequestOptions } from '../RequestOptions.js';\n\nimport { Assets } from './resources/assets.js';\nimport { LiveStreams } from './resources/liveStreams.js';\nimport { PlaybackIds } from './resources/playbackIds.js';\nimport { Uploads } from './resources/uploads.js';\nimport { SigningKeys } from './resources/signingKeys.js';\nimport { DeliveryUsage } from './resources/deliveryUsage.js';\nimport { PlaybackRestrictions } from './resources/playbackRestrictions.js';\nimport { Spaces } from './resources/spaces.js';\nimport { TranscriptionVocabularies } from './resources/transcriptionVocabularies.js';\n\n/**\n * @ignore\n * @extends Base\n * Video Class - Provides access to the Mux Video API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video } = muxClient;\n *\n * // Create an asset\n * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n *\n * // Create an asset playback ID\n * Video.Assets.createPlaybackId(assetId, { policy: 'public' });\n */\nexport class Video extends Base {\n  readonly Assets: Assets;\n  readonly LiveStreams: LiveStreams;\n  readonly PlaybackIds: PlaybackIds;\n  readonly PlaybackRestrictions: PlaybackRestrictions;\n  readonly Uploads: Uploads;\n  readonly SigningKeys: SigningKeys;\n  readonly DeliveryUsage: DeliveryUsage;\n  readonly Spaces: Spaces;\n  readonly TranscriptionVocabularies: TranscriptionVocabularies;\n\n  constructor(base: Base);\n  constructor(config: RequestOptions);\n  constructor(accessToken: string, secret: string, config: RequestOptions);\n  constructor(\n    accessTokenOrConfigOrBase: string | RequestOptions | Base,\n    secret?: string,\n    config?: RequestOptions\n  ) {\n    if (accessTokenOrConfigOrBase instanceof Base) {\n      super(accessTokenOrConfigOrBase);\n    } else if (typeof accessTokenOrConfigOrBase === 'object') {\n      super(accessTokenOrConfigOrBase);\n    } else {\n      super(accessTokenOrConfigOrBase, secret!, config!);\n    }\n\n    /** @type {Assets} */\n    this.Assets = new Assets(this);\n\n    /** @type {LiveStreams} */\n    this.LiveStreams = new LiveStreams(this);\n\n    /** @type {PlaybackIds} */\n    this.PlaybackIds = new PlaybackIds(this);\n\n    /** @Type {Uploads} */\n    this.Uploads = new Uploads(this);\n\n    /** @Type {SigningKeys} */\n    this.SigningKeys = new SigningKeys(this);\n\n    /** @Type {DeliveryUsage} */\n    this.DeliveryUsage = new DeliveryUsage(this);\n\n    /** @Type {PlaybackRestrictions} */\n    this.PlaybackRestrictions = new PlaybackRestrictions(this);\n\n    /** @Type {Spaces} */\n    this.Spaces = new Spaces(this);\n\n    /** @Type {TranscriptionVocabularies} */\n    this.TranscriptionVocabularies = new TranscriptionVocabularies(this);\n  }\n}\n","/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_config\", \"_tokenId\", \"_tokenSecret\"] }] */\n\nimport Axios, { AxiosInstance } from 'axios';\nimport EventEmitter from 'events';\n\nimport { RequestOptions, RequestParams } from './RequestOptions.js';\nimport { VERSION } from './version.js';\n\n/**\n * Mux Base Class - Simple base class to be extended by all child modules.\n *\n * @ignore\n * @property {string} tokenId - The ID for the access token.\n * @property {string} tokenSecret - The secret for the access token.\n * @property {object} config - The configuration for the Base object.\n * @property {Object} requestOptions - The HTTP request options for Mux Assets\n * @property {string} requestOptions.auth.username - HTTP basic auth username (access token)\n * @property {string} requestOptions.auth.password - HTTP basic auth password (secret)\n *\n */\nexport class Base extends EventEmitter {\n  readonly http: AxiosInstance;\n\n  private _tokenId!: string;\n  private _tokenSecret!: string;\n  private _config!: RequestOptions;\n\n  constructor(muxBase: Base);\n  constructor(requestOptions: RequestOptions);\n  constructor(tokenId: string, tokenSecret: string);\n  constructor(tokenId: string, tokenSecret: string, config: RequestOptions);\n  constructor(\n    tokenIdOrOptionsOrBase: string | RequestOptions | Base,\n    tokenSecret?: string,\n    config?: RequestOptions\n  ) {\n    super();\n\n    if (tokenIdOrOptionsOrBase instanceof Base) {\n      // we could do this with Object.assign but I'd rather we be really explicit about what we copy.\n      this.config = tokenIdOrOptionsOrBase._config;\n      this._tokenId = tokenIdOrOptionsOrBase._tokenId;\n      this._tokenSecret = tokenIdOrOptionsOrBase._tokenSecret;\n\n      this.http = tokenIdOrOptionsOrBase.http;\n    } else {\n      if (\n        typeof tokenIdOrOptionsOrBase === 'object' &&\n        !(tokenIdOrOptionsOrBase instanceof Base)\n      ) {\n        this.config = tokenIdOrOptionsOrBase;\n        this.tokenId = undefined;\n        this.tokenSecret = undefined;\n      } else {\n        // without 'as' this complains of Base | string typing, but we have ruled out the Base case implicitly\n        this.tokenId = tokenIdOrOptionsOrBase as string;\n        this.tokenSecret = tokenSecret;\n        this.config = config ?? {};\n      }\n\n      const request: RequestParams = {\n        baseURL: this.config.baseUrl,\n        headers: {\n          'User-Agent': `Mux Node | ${VERSION}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        withCredentials: false,\n        auth: {\n          username: this._tokenId,\n          password: this._tokenSecret,\n        },\n      };\n\n      if (this.config.platform?.name) {\n        if (this.config.platform?.name?.includes('|')) {\n          throw new Error('Platform name cannot contain a \"|\" value.');\n        }\n\n        if (this.config.platform?.version?.includes('|')) {\n          throw new Error('Platform version cannot contain a \"|\" value.');\n        }\n\n        request.headers[\n          'x-source-platform'\n        ] = `${this.config.platform?.name} | ${this.config.platform?.version}`;\n      }\n\n      this.http = Axios.create(request);\n\n      this.http.interceptors.request.use((req: any) => {\n        this.emit('request', req);\n\n        return req;\n      });\n\n      this.http.interceptors.response.use(\n        (res: any) => {\n          this.emit('response', res);\n          if (res.config.url && this.isVideoUrl(res.config.url)) {\n            return res.data && res.data.data;\n          }\n\n          return res.data;\n        },\n        (errorRes: any) =>\n          Promise.reject(\n            (errorRes.response && errorRes.response.data.error) || errorRes\n          )\n      );\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isVideoUrl(url: string) {\n    return url.startsWith(`/video/v1/`);\n  }\n\n  set config(options: RequestOptions) {\n    this._config = {\n      baseUrl: 'https://api.mux.com',\n      ...options,\n    };\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  set tokenId(token: string | undefined) {\n    const v = token || process.env.MUX_TOKEN_ID;\n    if (!v || v.length === 0) {\n      throw new Error('API Access Token must be provided.');\n    }\n\n    this._tokenId = v;\n  }\n\n  get tokenId() {\n    return this._tokenId;\n  }\n\n  set tokenSecret(secret: string | undefined) {\n    const v = secret || process.env.MUX_TOKEN_SECRET;\n    if (!v || v.length === 0) {\n      throw new Error('API secret key must be provided');\n    }\n\n    this._tokenSecret = v;\n  }\n\n  get tokenSecret() {\n    return this._tokenSecret;\n  }\n}\n","export const VERSION = '7.3.0' as const;\n","/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport {\n  Asset,\n  CreateAssetParams,\n  CreatePlaybackIdParams,\n  CreateTrackParams,\n  InputInfo,\n  ListAssetParams,\n  PlaybackId,\n  Track,\n  UpdateAssetParams,\n  UpdateMasterAccessParams,\n  UpdateMp4SupportParams,\n} from '../domain.js';\n\n/**\n * @private Base asset path for the Mux API\n * */\nconst PATH = '/video/v1/assets';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = (assetId: string) => `${PATH}/${assetId}`;\n\n/**\n * Assets Class - Provides access to the Mux Video Assets API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an asset\n * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n */\nexport class Assets extends Base {\n  /**\n   * Creates a Mux asset with the specified JSON parameters\n   * @param {Object} params - Asset JSON parameters (e.g input)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset\n   * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset\n   */\n  create(params: CreateAssetParams): Promise<Asset> {\n    if (!params) {\n      return Promise.reject(\n        new Error('Params are required for creating an asset')\n      );\n    }\n\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Updates an existing asset with new parameters.\n   *\n   * @param {string} assetId - the ID of the asset\n   * @param {Object} params - Asset JSON parameters (e.g passthrough)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   */\n  async update(assetId: string, params: UpdateAssetParams): Promise<Asset> {\n    if (!assetId || !params) {\n      throw new Error('assetId and params are required.');\n    }\n\n    return this.http.patch(buildBasePath(assetId), params);\n  }\n\n  /**\n   * Deletes a Mux asset\n   * @param {string} assetId - The ID for the asset intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset\n   * Video.Assets.del(assetId);\n   *\n   * @see hhttps://docs.mux.com/api-reference/video#operation/delete-asset\n   */\n  del(assetId: string): Promise<any> {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to delete an asset')\n      );\n    }\n    return this.http.delete(buildBasePath(assetId));\n  }\n\n  /**\n   * Get an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.Assets.get(assetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset\n   */\n  get(assetId: string): Promise<Asset> {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to get an asset')\n      );\n    }\n    return this.http.get(buildBasePath(assetId));\n  }\n\n  /**\n   * Get input info for an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get input info for an asset\n   * Video.Assets.inputInfo(assetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-input-info\n   */\n  inputInfo(assetId: string): Promise<Array<InputInfo>> {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to get input-info')\n      );\n    }\n    return this.http.get(`${buildBasePath(assetId)}/input-info`);\n  }\n\n  /**\n   * List all assets for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all assets for a Mux Environment\n   * Video.Assets.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-assets\n   */\n  list(params: ListAssetParams): Promise<Array<Asset>> {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Return an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the playbackId\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Retrieve an asset playbackId\n   * Video.Assets.playbackId(assetId, playbackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-playback-id\n   */\n  playbackId(assetId: string, playbackId: string): Promise<PlaybackId> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.get(\n      `${buildBasePath(assetId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - Asset JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset playback ID\n   * Video.Assets.createPlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset-playback-id\n   */\n  createPlaybackId(\n    assetId: string,\n    params: CreatePlaybackIdParams\n  ): Promise<PlaybackId> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Playback ID params are required'));\n    }\n    return this.http.post(`${buildBasePath(assetId)}/playback-ids`, params);\n  }\n\n  /**\n   * Delete an asset playback ID\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the asset playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset playback ID\n   * Video.Assets.deletePlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-asset-playback-id\n   */\n  deletePlaybackId(assetId: string, playbackId: string): Promise<any> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.delete(\n      `${buildBasePath(assetId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create a subtitle text track\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - subtitle text track JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset text track\n   * Video.Assets.createTrack(assetId, {\n   *   url: \"https://example.com/myVIdeo_en.srt\",\n   *   type: \"text\",\n   *   text_type: \"subtitles\",\n   *   language_code: \"en-US\",\n   * });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset-track\n   */\n  createTrack(assetId: string, params: CreateTrackParams): Promise<Track> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Text track params are required'));\n    }\n    return this.http.post(`${buildBasePath(assetId)}/tracks`, params);\n  }\n\n  /**\n   * Delete an asset text track\n   * @param {string} assetId - The ID for the asset\n   * @param {string} trackId - The ID for the asset text track to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset text track\n   * Video.Assets.deleteTrack(assetId, trackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-asset-track\n   */\n  deleteTrack(assetId: string, trackId: string): Promise<any> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!trackId) {\n      return Promise.reject(new Error('A track ID is required'));\n    }\n    return this.http.delete(`${buildBasePath(assetId)}/tracks/${trackId}`);\n  }\n\n  /**\n   * Update mp4 support for an asset\n   * @param {Object} params - mp4 support JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Updates mp4 support for an asset\n   * Video.Assets.updateMp4Support(assetId, {mp4_support: \"standard\"});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/update-asset-mp4-support\n   */\n  updateMp4Support(\n    assetId: string,\n    params: UpdateMp4SupportParams\n  ): Promise<Asset> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!(params && params.mp4_support)) {\n      return Promise.reject(new Error('params.mp4_support is required'));\n    }\n    return this.http.put(`${buildBasePath(assetId)}/mp4-support`, params);\n  }\n\n  /**\n   * Update master access for an asset\n   * @param {Object} params - master access JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Update master access for an asset\n   * Video.Assets.updateMasterAccess(assetId, {master_access: \"temporary\"});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/update-asset-master-access\n   */\n  updateMasterAccess(\n    assetId: string,\n    params: UpdateMasterAccessParams\n  ): Promise<Asset> {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!(params && params.master_access)) {\n      return Promise.reject(new Error('params.master_access is required'));\n    }\n    return this.http.put(`${buildBasePath(assetId)}/master-access`, params);\n  }\n}\n","/*!\n * Mux Live Streams\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport {\n  CreateLiveStreamParams,\n  CreatePlaybackIdParams,\n  ListLiveStreamParams,\n  LiveStream,\n  PlaybackId,\n  SimulcastTarget,\n  SimulcastTargetParams,\n  UpdateLiveStreamEmbeddedSubtitlesParams,\n  UpdateLiveStreamGeneratedSubtitlesParams,\n  UpdateLiveStreamParams,\n} from '../domain.js';\n\n/**\n * @private Base live stream path for the Mux API\n * */\nconst PATH = '/video/v1/live-streams';\n\n/**\n * @private\n * Build the base live stream path for the Mux API\n * */\nconst buildBasePath = (liveStreamId: string) => `${PATH}/${liveStreamId}`;\n\n/**\n * Live Streams Class - Provides access to the Mux Video Live Streams API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video } = muxClient;\n *\n * // Create a live stream\n * Video.LiveStreams.create({\n *  playback_policy: 'public',\n *  new_asset_settings: { playback_policy: 'public' }\n * });\n */\nexport class LiveStreams extends Base {\n  /**\n   * Creates a Mux live stream with the specified JSON parameters\n   * @param {Object} params - Live Stream JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a live stream\n   * Video.LiveStreams.create({\n   *  playback_policy: 'public',\n   *  new_asset_settings: { playback_policy: 'public' }\n   * });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream\n   */\n  create(params: CreateLiveStreamParams): Promise<LiveStream> {\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Updates an existing livestream with new parameters.\n   *\n   * @param {string} liveStreamId - the ID of the live stream\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   */\n  async update(\n    liveStreamId: string,\n    params: UpdateLiveStreamParams\n  ): Promise<LiveStream> {\n    if (!liveStreamId || !params) {\n      throw new Error('assetId and params are required.');\n    }\n\n    return this.http.patch(buildBasePath(liveStreamId), params);\n  }\n\n  /**\n   * Deletes a Mux Live Stream\n   * @param {string} liveStreamId - The ID for the live stream intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a mux live stream\n   * Video.LiveStreams.del(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream\n   */\n  del(liveStreamId: string): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to delete a live stream')\n      );\n    }\n    return this.http.delete(buildBasePath(liveStreamId));\n  }\n\n  /**\n   * Get an Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live stream\n   * Video.LiveStreams.get(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-live-stream\n   */\n  get(liveStreamId: string): Promise<LiveStream> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to get a live stream')\n      );\n    }\n    return this.http.get(buildBasePath(liveStreamId));\n  }\n\n  /**\n   * List all live streams for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all live streams for a Mux Environment\n   * Video.LiveStreams.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-live-streams\n   */\n  list(params: ListLiveStreamParams): Promise<Array<LiveStream>> {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Signal a live stream is finished\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Signal a live stream is finished\n   * Video.LiveStreams.signalComplete(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/signal-live-stream-complete\n   */\n  signalComplete(liveStreamId: string): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to signal a stream is complete')\n      );\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/complete`);\n  }\n\n  /**\n   * Reset a stream key\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Reset a live stream key if you want to immediately stop the current stream key\n   * // from working and create a new stream key that can be used for future broadcasts.\n   * Video.LiveStreams.resetStreamKey(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/reset-stream-key\n   */\n  resetStreamKey(liveStreamId: string): Promise<LiveStream> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to reset a live stream key')\n      );\n    }\n    return this.http.post(`${buildBasePath(liveStreamId)}/reset-stream-key`);\n  }\n\n  /**\n   * Create a live stream playback id\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live stream playback ID\n   * Video.LiveStreams.createPlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-playback-id\n   */\n  createPlaybackId(\n    liveStreamId: string,\n    params: CreatePlaybackIdParams\n  ): Promise<PlaybackId> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error(\n          'A live stream ID is required to create a live stream playback ID'\n        )\n      );\n    }\n\n    if (!params) {\n      return Promise.reject(\n        new Error(\n          'A playback policy is required to create a live stream playback ID'\n        )\n      );\n    }\n    return this.http.post(\n      `${buildBasePath(liveStreamId)}/playback-ids`,\n      params\n    );\n  }\n\n  /**\n   * Delete a live stream playback ID\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} playbackId - The ID for the live stream playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a live stream playback ID\n   * Video.LiveStreams.deletePlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-playback-id\n   */\n  deletePlaybackId(liveStreamId: string, playbackId: string): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error(\n          'A live stream ID is required to delete a live stream playback ID'\n        )\n      );\n    }\n\n    if (!playbackId) {\n      return Promise.reject(\n        new Error(\n          'A live stream playback ID is required to delete a live stream playback ID'\n        )\n      );\n    }\n    return this.http.delete(\n      `${buildBasePath(liveStreamId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Return a live stream playback id\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} playbackId - The ID for the playbackId\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-playback-id\n   */\n  playbackId(liveStreamId: string, playbackId: string): Promise<PlaybackId> {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.get(\n      `${buildBasePath(liveStreamId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Simulcast Target JSON parameters (e.g url and stream_key)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live simulcast target\n   * Video.LiveStreams.createSimulcastTarget(liveStreamId, {url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi', passthrough: 'Example Live Streaming service'});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-simulcast-target\n   */\n  createSimulcastTarget(\n    liveStreamId: string,\n    params: SimulcastTargetParams\n  ): Promise<SimulcastTarget> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to create a simulcast target')\n      );\n    }\n\n    if (!(params && params.url)) {\n      return Promise.reject(\n        new Error('A url is required to create a simulcast target')\n      );\n    }\n    return this.http.post(\n      `${buildBasePath(liveStreamId)}/simulcast-targets`,\n      params\n    );\n  }\n\n  /**\n   * Get a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live simulcast target\n   * Video.LiveStreams.getSimulcastTarget(liveStreamId, simulcastTargetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-live-stream-simulcast-target\n   */\n  getSimulcastTarget(\n    liveStreamId: string,\n    simulcastTargetId: string\n  ): Promise<SimulcastTarget> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to get a simulcast target')\n      );\n    }\n\n    if (!simulcastTargetId) {\n      return Promise.reject(\n        new Error('A simulcast target ID is required to get a simulcast target')\n      );\n    }\n    return this.http.get(\n      `${buildBasePath(liveStreamId)}/simulcast-targets/${simulcastTargetId}`\n    );\n  }\n\n  /**\n   * Delete a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a simulcast target\n   * Video.LiveStreams.deleteSimulcastTarget(liveStreamId, simulcastTargetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-simulcast-target\n   */\n  deleteSimulcastTarget(\n    liveStreamId: string,\n    simulcastTargetId: string\n  ): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to delete a simulcast target')\n      );\n    }\n\n    if (!simulcastTargetId) {\n      return Promise.reject(\n        new Error(\n          'A simulcast target ID is required to delete a simulcast target'\n        )\n      );\n    }\n    return this.http.delete(\n      `${buildBasePath(liveStreamId)}/simulcast-targets/${simulcastTargetId}`\n    );\n  }\n\n  /**\n   * Configures a live stream to receive embedded closed captions.\n   * The resulting Asset's subtitle text track will have `closed_captions: true` set.\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} params - Embedded subtitles parameters.\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   */\n  async updateEmbeddedSubtitles(\n    liveStreamId: string,\n    params: UpdateLiveStreamEmbeddedSubtitlesParams\n  ): Promise<LiveStream> {\n    if (!liveStreamId || !params) {\n      throw new Error('liveStreamId and params are required.');\n    }\n\n    return this.http.put(\n      `${buildBasePath(liveStreamId)}/embedded-subtitles`,\n      params\n    );\n  }\n\n  /**\n   * Configures a live stream to receive generated closed captions.\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} params - Generated subtitles parameters.\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   */\n  async updateGeneratedSubtitles(\n    liveStreamId: string,\n    params: UpdateLiveStreamGeneratedSubtitlesParams\n  ): Promise<LiveStream> {\n    if (!liveStreamId || !params) {\n      throw new Error('liveStreamId and params are required.');\n    }\n\n    return this.http.put(\n      `${buildBasePath(liveStreamId)}/generated-subtitles`,\n      params\n    );\n  }\n\n  /**\n   * Disable a Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Disable a live stream\n   * Video.LiveStreams.disable(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/disable-live-stream\n   */\n  disable(liveStreamId: string): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to disable a live stream')\n      );\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/disable`);\n  }\n\n  /**\n   * Enable a Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Enable a Live Stream\n   * Video.LiveStreams.enable(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/enable-live-stream\n   */\n  enable(liveStreamId: string): Promise<any> {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to enable a live stream')\n      );\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/enable`);\n  }\n}\n","/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport { PlaybackIdentifier } from '../domain.js';\n\n/**\n * @private Base playback ID path for the Mux API\n * */\nconst PATH = '/video/v1/playback-ids';\n\n/**\n * @private\n * Build the base playback ID path for the Mux API\n * */\nconst buildBasePath = (playbackId: string) => `${PATH}/${playbackId}`;\n\n/**\n * PlaybackIds Class - Provides access to the Mux Playback ID API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Retrieve an Asset or Live Stream  identifier associated with a Playback ID\n * Video.PlaybackIds.get(playbackId);\n */\nexport class PlaybackIds extends Base {\n  /**\n   * Retrieve an Asset or Live Stream  identifier associated with a Playback ID\n   * @param {string} playbackId - The ID for playback\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Retrieve an Asset or Live Stream identifier associated with a Playback ID\n   * Video.PlaybackIds.get(playbackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-or-livestream-id\n   */\n  get(playbackId: string): Promise<PlaybackIdentifier> {\n    if (!playbackId) {\n      return Promise.reject(\n        new Error(\n          'An playback ID is required to get an asset or live stream identifier'\n        )\n      );\n    }\n    return this.http.get(buildBasePath(playbackId));\n  }\n}\n","/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport { CreateUploadParams, ListUploadParams, Upload } from '../domain.js';\n\n/**\n * @private Base asset path for the Mux API\n * */\nconst PATH = '/video/v1/uploads';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = (uploadId: string) => `${PATH}/${uploadId}`;\n\n/**\n * Uploads Class - Provides access to the Mux Video Uploads API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an upload\n * Video.Uploads.create({ new_asset_settings: { playback_policy: 'public' } });\n */\nexport class Uploads extends Base {\n  /**\n   * Creates a direct upload with the specified JSON parameters\n   * @extends Base\n   * @param {Object} params - Upload JSON parameters (e.g timeout)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a new upload\n   * const upload = await Video.Uploads.create({new_asset_settings: {playback_policy: 'public'}});\n   * // Now push a file to the URL returned.\n   * fs.createReadStream(pathToFile).pipe(request.put(upload.url))\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-direct-upload\n   */\n  create(params: CreateUploadParams): Promise<Upload> {\n    if (!params) {\n      return Promise.reject(\n        new Error('Params are required for creating a direct upload')\n      );\n    }\n\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Cancels an upload\n   * @param {string} uploadId - The ID for the upload intended for cancellation\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Cancels an upload\n   * Video.Uploads.cancel(uploadId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/cancel-direct-upload\n   */\n  cancel(uploadId: string): Promise<any> {\n    if (!uploadId) {\n      return Promise.reject(new Error('An upload ID is required'));\n    }\n    return this.http.put(`${buildBasePath(uploadId)}/cancel`);\n  }\n\n  /**\n   * Get an upload\n   * @param {string} uploadId - The ID for the upload\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an upload\n   * Video.Uploads.get(uploadId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-direct-upload\n   */\n  get(uploadId: string): Promise<Upload> {\n    if (!uploadId) {\n      return Promise.reject(\n        new Error('An upload ID is required to get an asset')\n      );\n    }\n    return this.http.get(buildBasePath(uploadId));\n  }\n\n  /**\n   * List all uploads\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all uploads\n   * Video.Uploads.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-direct-uploads\n   */\n  list(params: ListUploadParams): Promise<Array<Upload>> {\n    return this.http.get(PATH, { params });\n  }\n}\n","/*!\n * Mux Signing Keys\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport { SigningKey } from '../domain.js';\n\n/**\n * @private Base signing-key path for the Mux API\n * */\nconst PATH = '/video/v1/signing-keys';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = (keyId: string) => `${PATH}/${keyId}`;\n\n/**\n * Signing Key Class - Provides access to the Mux Video Signing Key API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create a new signing key\n * Video.SigningKeys.create();\n */\nexport class SigningKeys extends Base {\n  /**\n   * Creates a new Signing Key that can be used with the JWT module to sign URLs.\n   * @extends Base\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a new signing key\n   * Video.SigningKeys.create();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-url-signing-key\n   */\n  create(): Promise<SigningKey> {\n    return this.http.post(PATH, {});\n  }\n\n  /**\n   * Get a signing key. *Note* The private key is _not_ returned.\n   * @param {string} keyId - The ID for the signing key\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a signing key\n   * Video.SigningKeys.get(keyId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-url-signing-key\n   */\n  get(keyId: string): Promise<SigningKey> {\n    if (!keyId) {\n      return Promise.reject(new Error('An signing key ID is required.'));\n    }\n    return this.http.get(buildBasePath(keyId));\n  }\n\n  /**\n   * Delete a signing key\n   * @param {string} keyId - The ID for the signing key\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a signing key\n   * Video.SigningKeys.del(keyId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-url-signing-key\n   */\n  del(keyId: string): Promise<any> {\n    if (!keyId) {\n      return Promise.reject(new Error('An signing key ID is required.'));\n    }\n    return this.http.delete(buildBasePath(keyId));\n  }\n\n  /**\n   * List signing keys\n   * @param {string} keyId - The ID for the signing key\n   * @param {object} params - Object to include as query params\n   * @param {number} params.limit - Number of signing keys to return in the response\n   * @param {number} params.page - Page of signing keys to return (limit * page)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all signing keys\n   * Video.SigningKeys.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-url-signing-keys\n   */\n  list(params: {} = {}): Promise<Array<SigningKey>> {\n    return this.http.get(PATH, { params });\n  }\n}\n","/*!\n * Mux DeliveryUsage\n * Copyright(c) 2018 Mux Inc.\n */\nimport { Base } from '../../base.js';\nimport { DeliveryReport, ListDeliveryUsageParams } from '../domain.js';\n\n/**\n * @private Base delivery usage path for the Mux API\n * */\nconst PATH = '/video/v1/delivery-usage';\n\n/**\n * DeliveryUsage Class - Provides access to the Mux Video Delivery Usage API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // List delivery usage within a timeframe\n * Video.DeliveryUsage.list({timeframe: [1574076240, 1573471440]});\n */\nexport class DeliveryUsage extends Base {\n  /**\n   * List all delivery usage during a timeframe for a Mux Environment (tied to your access token)\n   * @param {Object} params - Request JSON parameters (e.g timeframe)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all delivery usage for a Mux Environment within a timeframe\n   * Video.DeliveryUsage.list({timeframe: [1574076240, 1573471440]});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-delivery-usage\n   */\n  list(params: ListDeliveryUsageParams): Promise<Array<DeliveryReport>> {\n    return this.http.get(PATH, { params });\n  }\n}\n","import { Base } from '../../base.js';\nimport {\n  CreatePlaybackRestrictionParams,\n  PlaybackRestriction,\n  ReferrerDomainRestriction,\n} from '../domain.js';\n\n/**\n * @private Base playback restriction path for the Mux API\n * */\nconst PATH = '/video/v1/playback-restrictions';\n\n/**\n * @private\n * Build the base playback restriction path for the Mux API\n * */\nconst buildBasePath = (restrictionId: string) => `${PATH}/${restrictionId}`;\n\nexport class PlaybackRestrictions extends Base {\n  create(\n    restriction: CreatePlaybackRestrictionParams\n  ): Promise<PlaybackRestriction> {\n    return this.http.post(PATH, restriction);\n  }\n\n  list(): Promise<Array<PlaybackRestriction>> {\n    return this.http.get(PATH);\n  }\n\n  get(restrictionId: string): Promise<PlaybackRestriction> {\n    return this.http.get(buildBasePath(restrictionId));\n  }\n\n  delete(restrictionId: string): Promise<PlaybackRestriction> {\n    return this.http.delete(buildBasePath(restrictionId));\n  }\n\n  putReferrer(\n    restrictionId: string,\n    referrer: ReferrerDomainRestriction\n  ): Promise<PlaybackRestriction> {\n    return this.http.put(`${buildBasePath(restrictionId)}/referrer`, referrer);\n  }\n}\n","import { Base } from '../../base.js';\nimport { RequestOptions } from '../../RequestOptions.js';\nimport {\n  Broadcast,\n  CreateBroadcastRequest,\n  CreateSpaceRequest,\n  ListSpacesRequest,\n  Space,\n} from '../domain.js';\n\nconst BASE_PATH = '/video/v1/spaces';\n\nconst SPACE_PATH = (spaceId: string) => `${BASE_PATH}/${spaceId}`;\nconst BROADCAST_PATH = (spaceId: string, broadcastId: string) =>\n  `${SPACE_PATH(spaceId)}/broadcasts/${broadcastId}`;\n\nexport class Broadcasts extends Base {\n  create(spaceId: string, request: CreateBroadcastRequest): Promise<Broadcast> {\n    return this.http.post(`${SPACE_PATH(spaceId)}/broadcasts`, request);\n  }\n\n  get(spaceId: string, broadcastId: string): Promise<Broadcast> {\n    return this.http.get(BROADCAST_PATH(spaceId, broadcastId));\n  }\n\n  delete(spaceId: string, broadcastId: string): Promise<any> {\n    return this.http.delete(BROADCAST_PATH(spaceId, broadcastId));\n  }\n\n  start(spaceId: string, broadcastId: string): Promise<any> {\n    return this.http.post(`${BROADCAST_PATH(spaceId, broadcastId)}/start`);\n  }\n\n  stop(spaceId: string, broadcastId: string): Promise<any> {\n    return this.http.post(`${BROADCAST_PATH(spaceId, broadcastId)}/stop`);\n  }\n}\n\nexport class Spaces extends Base {\n  readonly Broadcasts: Broadcasts;\n\n  constructor(base: Base);\n  constructor(config: RequestOptions);\n  constructor(accessToken: string, secret: string);\n  constructor(accessToken: string, secret: string, config: RequestOptions);\n  constructor(\n    accessTokenOrConfigOrBase: string | RequestOptions | Base,\n    secret?: string,\n    config?: RequestOptions\n  ) {\n    if (accessTokenOrConfigOrBase instanceof Base) {\n      super(accessTokenOrConfigOrBase);\n    } else if (typeof accessTokenOrConfigOrBase === 'object') {\n      super(accessTokenOrConfigOrBase);\n    } else {\n      super(accessTokenOrConfigOrBase, secret!, config ?? {});\n    }\n\n    this.Broadcasts = new Broadcasts(this);\n  }\n\n  create(req: CreateSpaceRequest): Promise<Space> {\n    return this.http.post(BASE_PATH, req);\n  }\n\n  list(params: ListSpacesRequest): Promise<Array<Space>> {\n    return this.http.get(BASE_PATH, { params });\n  }\n\n  get(spaceId: string): Promise<Space> {\n    return this.http.get(SPACE_PATH(spaceId));\n  }\n\n  delete(spaceId: string): Promise<Space> {\n    return this.http.delete(SPACE_PATH(spaceId));\n  }\n}\n","import { Base } from '../../base.js';\nimport {\n  UpsertTranscriptionVocabularyParams,\n  TranscriptionVocabulary,\n} from '../domain.js';\n\n/**\n * @private Base transcription vocabulary path for the Mux API\n * */\nconst PATH = '/video/v1/transcription-vocabularies';\n\n/**\n * @private\n * Build the base transcription vocabulary path for the Mux API\n * */\nconst buildBasePath = (transcriptionVocabularyId: string) =>\n  `${PATH}/${transcriptionVocabularyId}`;\n\nexport class TranscriptionVocabularies extends Base {\n  create(\n    transcriptionVocabulary: UpsertTranscriptionVocabularyParams\n  ): Promise<TranscriptionVocabulary> {\n    return this.http.post(PATH, transcriptionVocabulary);\n  }\n\n  list(): Promise<Array<TranscriptionVocabulary>> {\n    return this.http.get(PATH);\n  }\n\n  get(transcriptionVocabularyId: string): Promise<TranscriptionVocabulary> {\n    return this.http.get(buildBasePath(transcriptionVocabularyId));\n  }\n\n  delete(transcriptionVocabularyId: string): Promise<void> {\n    return this.http.delete(buildBasePath(transcriptionVocabularyId));\n  }\n\n  update(\n    transcriptionVocabularyId: string,\n    transcriptionVocabulary: UpsertTranscriptionVocabularyParams\n  ): Promise<TranscriptionVocabulary> {\n    return this.http.put(\n      `${buildBasePath(transcriptionVocabularyId)}`,\n      transcriptionVocabulary\n    );\n  }\n}\n"],"mappings":"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","names":[]}