{"version":3,"sources":["../../../src/webhooks/resources/verify_header.ts"],"sourcesContent":["import crypto from 'crypto';\n\nexport const HeaderScheme = {\n  V1: 'v1',\n} as const;\n// eslint-disable-next-line no-redeclare\nexport type HeaderScheme = typeof HeaderScheme[keyof typeof HeaderScheme];\n\nconst DEFAULT_TOLERANCE = 300; // 5 minutes\nconst EXPECTED_SCHEME: HeaderScheme = HeaderScheme.V1;\n\n/**\n * Secure compare, from https://github.com/freewil/scmp\n */\nfunction secureCompare(_a: string, _b: string) {\n  const a = Buffer.from(_a);\n  const b = Buffer.from(_b);\n\n  // return early here if buffer lengths are not equal since timingSafeEqual\n  // will throw if buffer lengths are not equal\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // use crypto.timingSafeEqual if available (since Node.js v6.6.0),\n  // otherwise use our own scmp-internal function.\n  if (crypto.timingSafeEqual) {\n    return crypto.timingSafeEqual(a, b);\n  }\n\n  const len = a.length;\n  let result = 0;\n\n  for (let i = 0; i < len; i += 1) {\n    /* eslint-disable no-bitwise */\n    result |= a[i] ^ b[i];\n  }\n  return result === 0;\n}\n\nexport class VerifyHeader {\n  static parseHeader(header?: string, scheme: HeaderScheme = HeaderScheme.V1) {\n    if (typeof header !== 'string') {\n      return null;\n    }\n\n    if (scheme !== EXPECTED_SCHEME) {\n      throw new Error(`Unrecognized header scheme: '${scheme}'`);\n    }\n\n    return header.split(',').reduce(\n      (accum, item) => {\n        const kv: string[] = item.split('=');\n\n        if (kv[0] === 't') {\n          /* eslint-disable no-param-reassign, prefer-destructuring */\n          accum.timestamp = parseInt(kv[1], 10);\n        }\n\n        if (kv[0] === scheme && typeof kv[1] === 'string') {\n          accum.signatures.push(kv[1]);\n        }\n\n        return accum;\n      },\n      {\n        timestamp: -1,\n        signatures: [] as string[],\n      }\n    );\n  }\n\n  static computeSignature(payload: string, secret: string | Buffer) {\n    return crypto\n      .createHmac('sha256', secret)\n      .update(payload, 'utf8')\n      .digest('hex');\n  }\n\n  static verify(\n    _payload: string | Buffer,\n    _header: string | Buffer,\n    secret: string | Buffer,\n    tolerance: number = DEFAULT_TOLERANCE\n  ) {\n    const payload = Buffer.isBuffer(_payload)\n      ? _payload.toString('utf8')\n      : _payload;\n    const header = Buffer.isBuffer(_header)\n      ? _header.toString('utf8')\n      : _header;\n\n    const details = this.parseHeader(header);\n\n    if (!details || details.timestamp === -1) {\n      throw new Error('Unable to extract timestamp and signatures from header');\n    }\n\n    if (!details.signatures.length) {\n      throw new Error('No signatures found with expected scheme');\n    }\n\n    const expectedSignature = this.computeSignature(\n      `${details.timestamp}.${payload}`,\n      secret\n    );\n\n    const signatureFound = !!details.signatures.filter((sig) =>\n      secureCompare(sig, expectedSignature)\n    ).length;\n\n    if (!signatureFound) {\n      throw new Error(\n        'No signatures found matching the expected signature for payload.'\n      );\n    }\n\n    const timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n    if (tolerance > 0 && timestampAge > tolerance) {\n      throw new Error('Timestamp outside the tolerance zone');\n    }\n\n    return true;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmB;AAEZ,IAAM,eAAe;AAAA,EAC1B,IAAI;AACN;AAIA,IAAM,oBAAoB;AAC1B,IAAM,kBAAgC,aAAa;AAKnD,uBAAuB,IAAY,IAAY;AAC7C,QAAM,IAAI,OAAO,KAAK,EAAE;AACxB,QAAM,IAAI,OAAO,KAAK,EAAE;AAIxB,MAAI,EAAE,WAAW,EAAE,QAAQ;AACzB,WAAO;AAAA,EACT;AAIA,MAAI,sBAAO,iBAAiB;AAC1B,WAAO,sBAAO,gBAAgB,GAAG,CAAC;AAAA,EACpC;AAEA,QAAM,MAAM,EAAE;AACd,MAAI,SAAS;AAEb,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAE/B,cAAU,EAAE,KAAK,EAAE;AAAA,EACrB;AACA,SAAO,WAAW;AACpB;AAEO,IAAM,eAAN,MAAmB;AAAA,EACxB,OAAO,YAAY,QAAiB,SAAuB,aAAa,IAAI;AAC1E,QAAI,OAAO,WAAW,UAAU;AAC9B,aAAO;AAAA,IACT;AAEA,QAAI,WAAW,iBAAiB;AAC9B,YAAM,IAAI,MAAM,gCAAgC,SAAS;AAAA,IAC3D;AAEA,WAAO,OAAO,MAAM,GAAG,EAAE,OACvB,CAAC,OAAO,SAAS;AACf,YAAM,KAAe,KAAK,MAAM,GAAG;AAEnC,UAAI,GAAG,OAAO,KAAK;AAEjB,cAAM,YAAY,SAAS,GAAG,IAAI,EAAE;AAAA,MACtC;AAEA,UAAI,GAAG,OAAO,UAAU,OAAO,GAAG,OAAO,UAAU;AACjD,cAAM,WAAW,KAAK,GAAG,EAAE;AAAA,MAC7B;AAEA,aAAO;AAAA,IACT,GACA;AAAA,MACE,WAAW;AAAA,MACX,YAAY,CAAC;AAAA,IACf,CACF;AAAA,EACF;AAAA,EAEA,OAAO,iBAAiB,SAAiB,QAAyB;AAChE,WAAO,sBACJ,WAAW,UAAU,MAAM,EAC3B,OAAO,SAAS,MAAM,EACtB,OAAO,KAAK;AAAA,EACjB;AAAA,EAEA,OAAO,OACL,UACA,SACA,QACA,YAAoB,mBACpB;AACA,UAAM,UAAU,OAAO,SAAS,QAAQ,IACpC,SAAS,SAAS,MAAM,IACxB;AACJ,UAAM,SAAS,OAAO,SAAS,OAAO,IAClC,QAAQ,SAAS,MAAM,IACvB;AAEJ,UAAM,UAAU,KAAK,YAAY,MAAM;AAEvC,QAAI,CAAC,WAAW,QAAQ,cAAc,IAAI;AACxC,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,QAAQ,WAAW,QAAQ;AAC9B,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC5D;AAEA,UAAM,oBAAoB,KAAK,iBAC7B,GAAG,QAAQ,aAAa,WACxB,MACF;AAEA,UAAM,iBAAiB,CAAC,CAAC,QAAQ,WAAW,OAAO,CAAC,QAClD,cAAc,KAAK,iBAAiB,CACtC,EAAE;AAEF,QAAI,CAAC,gBAAgB;AACnB,YAAM,IAAI,MACR,kEACF;AAAA,IACF;AAEA,UAAM,eAAe,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,IAAI,QAAQ;AAE7D,QAAI,YAAY,KAAK,eAAe,WAAW;AAC7C,YAAM,IAAI,MAAM,sCAAsC;AAAA,IACxD;AAEA,WAAO;AAAA,EACT;AACF;","names":[]}