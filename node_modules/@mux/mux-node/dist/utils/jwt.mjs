"use strict";

// src/utils/jwt.ts
import fs from "fs";
import jwt from "jsonwebtoken";
var TypeClaim = /* @__PURE__ */ ((TypeClaim2) => {
  TypeClaim2["video"] = "v";
  TypeClaim2["thumbnail"] = "t";
  TypeClaim2["gif"] = "g";
  TypeClaim2["storyboard"] = "s";
  TypeClaim2["stats"] = "playback_id";
  return TypeClaim2;
})(TypeClaim || {});
var DataTypeClaim = /* @__PURE__ */ ((DataTypeClaim2) => {
  DataTypeClaim2["video"] = "video_id";
  DataTypeClaim2["asset"] = "asset_id";
  DataTypeClaim2["playback"] = "playback_id";
  DataTypeClaim2["live_stream"] = "livestream_id";
  return DataTypeClaim2;
})(DataTypeClaim || {});
var getSigningKey = (options) => {
  const keyId = options.keyId || process.env.MUX_SIGNING_KEY;
  if (!keyId) {
    throw new TypeError("Signing Key ID required");
  }
  return keyId;
};
var getPrivateKey = (options) => {
  let key;
  if (options.keySecret) {
    key = options.keySecret;
  } else if (options.keyFilePath) {
    key = fs.readFileSync(options.keyFilePath);
  } else if (process.env.MUX_PRIVATE_KEY) {
    key = Buffer.from(process.env.MUX_PRIVATE_KEY, "base64");
  }
  if (Buffer.isBuffer(key)) {
    return key;
  }
  if (key) {
    const [rsaHeader] = key.toString().split("\n");
    if (rsaHeader === "-----BEGIN RSA PRIVATE KEY-----") {
      return key;
    }
    try {
      return Buffer.from(key, "base64");
    } catch (err) {
      throw new TypeError("Specified signing key must be either a valid PEM string or a base64 encoded PEM.");
    }
  }
  throw new TypeError("Signing Key ID required");
};
var JWT = class {
  static sign(playbackId, options = {}) {
    process.emitWarning("The JWT.sign() method has been deprecated, please use JWT.signPlaybackId() instead", "DeprecatedWarning");
    return this.signPlaybackId(playbackId, options);
  }
  static signPlaybackId(playbackId, options = {}) {
    const opts = {
      type: "video",
      expiration: "7d",
      params: {},
      ...options
    };
    const keyId = getSigningKey(options);
    const keySecret = getPrivateKey(options);
    const typeClaim = TypeClaim[opts.type];
    if (!typeClaim) {
      throw new Error(`Invalid signature type: ${opts.type}`);
    }
    const tokenOptions = {
      keyid: keyId,
      subject: playbackId,
      audience: typeClaim,
      expiresIn: opts.expiration,
      noTimestamp: true,
      algorithm: "RS256"
    };
    return jwt.sign(opts.params, keySecret, tokenOptions);
  }
  static signSpaceId(spaceId, options = {}) {
    const opts = {
      expiration: "7d",
      params: {},
      ...options
    };
    const keyId = getSigningKey(options);
    const keySecret = getPrivateKey(options);
    const tokenOptions = {
      keyid: keyId,
      subject: spaceId,
      audience: "rt",
      expiresIn: opts.expiration,
      noTimestamp: true,
      algorithm: "RS256"
    };
    if (!spaceId) {
      throw new TypeError("A valid Space ID is required");
    }
    return jwt.sign(opts.params, keySecret, tokenOptions);
  }
  static signViewerCounts(Id, options = {}) {
    const opts = {
      type: "video",
      expiration: "7d",
      params: {},
      ...options
    };
    const keyId = getSigningKey(options);
    const keySecret = getPrivateKey(options);
    const typeClaim = DataTypeClaim[opts.type];
    if (!typeClaim) {
      throw new Error(`Invalid signature type: ${opts.type}`);
    }
    const tokenOptions = {
      keyid: keyId,
      subject: Id,
      audience: typeClaim,
      expiresIn: opts.expiration,
      noTimestamp: true,
      algorithm: "RS256"
    };
    return jwt.sign(opts.params, keySecret, tokenOptions);
  }
  static decode(token) {
    return jwt.decode(token);
  }
};
export {
  DataTypeClaim,
  JWT,
  TypeClaim
};
/*!
 * JWT - Signed URL Helpers
 * Note: Hacking this module into a class with static methods because ESDoc forces it. We'll revisit ESDoc later.
 * Documentationjs looks real nice.
 */
//# sourceMappingURL=jwt.mjs.map