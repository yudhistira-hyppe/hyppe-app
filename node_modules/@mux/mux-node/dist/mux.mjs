"use strict";

// src/base.ts
import Axios from "axios";
import EventEmitter from "events";

// src/version.ts
var VERSION = "7.3.0";

// src/base.ts
var Base = class extends EventEmitter {
  constructor(tokenIdOrOptionsOrBase, tokenSecret, config) {
    var _a, _b, _c, _d, _e, _f, _g;
    super();
    if (tokenIdOrOptionsOrBase instanceof Base) {
      this.config = tokenIdOrOptionsOrBase._config;
      this._tokenId = tokenIdOrOptionsOrBase._tokenId;
      this._tokenSecret = tokenIdOrOptionsOrBase._tokenSecret;
      this.http = tokenIdOrOptionsOrBase.http;
    } else {
      if (typeof tokenIdOrOptionsOrBase === "object" && !(tokenIdOrOptionsOrBase instanceof Base)) {
        this.config = tokenIdOrOptionsOrBase;
        this.tokenId = void 0;
        this.tokenSecret = void 0;
      } else {
        this.tokenId = tokenIdOrOptionsOrBase;
        this.tokenSecret = tokenSecret;
        this.config = config ?? {};
      }
      const request = {
        baseURL: this.config.baseUrl,
        headers: {
          "User-Agent": `Mux Node | ${VERSION}`,
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        withCredentials: false,
        auth: {
          username: this._tokenId,
          password: this._tokenSecret
        }
      };
      if ((_a = this.config.platform) == null ? void 0 : _a.name) {
        if ((_c = (_b = this.config.platform) == null ? void 0 : _b.name) == null ? void 0 : _c.includes("|")) {
          throw new Error('Platform name cannot contain a "|" value.');
        }
        if ((_e = (_d = this.config.platform) == null ? void 0 : _d.version) == null ? void 0 : _e.includes("|")) {
          throw new Error('Platform version cannot contain a "|" value.');
        }
        request.headers["x-source-platform"] = `${(_f = this.config.platform) == null ? void 0 : _f.name} | ${(_g = this.config.platform) == null ? void 0 : _g.version}`;
      }
      this.http = Axios.create(request);
      this.http.interceptors.request.use((req) => {
        this.emit("request", req);
        return req;
      });
      this.http.interceptors.response.use((res) => {
        this.emit("response", res);
        if (res.config.url && this.isVideoUrl(res.config.url)) {
          return res.data && res.data.data;
        }
        return res.data;
      }, (errorRes) => Promise.reject(errorRes.response && errorRes.response.data.error || errorRes));
    }
  }
  isVideoUrl(url) {
    return url.startsWith(`/video/v1/`);
  }
  set config(options) {
    this._config = {
      baseUrl: "https://api.mux.com",
      ...options
    };
  }
  get config() {
    return this._config;
  }
  set tokenId(token) {
    const v = token || process.env.MUX_TOKEN_ID;
    if (!v || v.length === 0) {
      throw new Error("API Access Token must be provided.");
    }
    this._tokenId = v;
  }
  get tokenId() {
    return this._tokenId;
  }
  set tokenSecret(secret) {
    const v = secret || process.env.MUX_TOKEN_SECRET;
    if (!v || v.length === 0) {
      throw new Error("API secret key must be provided");
    }
    this._tokenSecret = v;
  }
  get tokenSecret() {
    return this._tokenSecret;
  }
};

// src/video/resources/assets.ts
var PATH = "/video/v1/assets";
var buildBasePath = (assetId) => `${PATH}/${assetId}`;
var Assets = class extends Base {
  create(params) {
    if (!params) {
      return Promise.reject(new Error("Params are required for creating an asset"));
    }
    return this.http.post(PATH, params);
  }
  async update(assetId, params) {
    if (!assetId || !params) {
      throw new Error("assetId and params are required.");
    }
    return this.http.patch(buildBasePath(assetId), params);
  }
  del(assetId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required to delete an asset"));
    }
    return this.http.delete(buildBasePath(assetId));
  }
  get(assetId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required to get an asset"));
    }
    return this.http.get(buildBasePath(assetId));
  }
  inputInfo(assetId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required to get input-info"));
    }
    return this.http.get(`${buildBasePath(assetId)}/input-info`);
  }
  list(params) {
    return this.http.get(PATH, { params });
  }
  playbackId(assetId, playbackId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!playbackId) {
      return Promise.reject(new Error("A playback ID is required"));
    }
    return this.http.get(`${buildBasePath(assetId)}/playback-ids/${playbackId}`);
  }
  createPlaybackId(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!params) {
      return Promise.reject(new Error("Playback ID params are required"));
    }
    return this.http.post(`${buildBasePath(assetId)}/playback-ids`, params);
  }
  deletePlaybackId(assetId, playbackId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!playbackId) {
      return Promise.reject(new Error("A playback ID is required"));
    }
    return this.http.delete(`${buildBasePath(assetId)}/playback-ids/${playbackId}`);
  }
  createTrack(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!params) {
      return Promise.reject(new Error("Text track params are required"));
    }
    return this.http.post(`${buildBasePath(assetId)}/tracks`, params);
  }
  deleteTrack(assetId, trackId) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!trackId) {
      return Promise.reject(new Error("A track ID is required"));
    }
    return this.http.delete(`${buildBasePath(assetId)}/tracks/${trackId}`);
  }
  updateMp4Support(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!(params && params.mp4_support)) {
      return Promise.reject(new Error("params.mp4_support is required"));
    }
    return this.http.put(`${buildBasePath(assetId)}/mp4-support`, params);
  }
  updateMasterAccess(assetId, params) {
    if (!assetId) {
      return Promise.reject(new Error("An asset ID is required"));
    }
    if (!(params && params.master_access)) {
      return Promise.reject(new Error("params.master_access is required"));
    }
    return this.http.put(`${buildBasePath(assetId)}/master-access`, params);
  }
};

// src/video/resources/liveStreams.ts
var PATH2 = "/video/v1/live-streams";
var buildBasePath2 = (liveStreamId) => `${PATH2}/${liveStreamId}`;
var LiveStreams = class extends Base {
  create(params) {
    return this.http.post(PATH2, params);
  }
  async update(liveStreamId, params) {
    if (!liveStreamId || !params) {
      throw new Error("assetId and params are required.");
    }
    return this.http.patch(buildBasePath2(liveStreamId), params);
  }
  del(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to delete a live stream"));
    }
    return this.http.delete(buildBasePath2(liveStreamId));
  }
  get(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to get a live stream"));
    }
    return this.http.get(buildBasePath2(liveStreamId));
  }
  list(params) {
    return this.http.get(PATH2, { params });
  }
  signalComplete(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to signal a stream is complete"));
    }
    return this.http.put(`${buildBasePath2(liveStreamId)}/complete`);
  }
  resetStreamKey(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to reset a live stream key"));
    }
    return this.http.post(`${buildBasePath2(liveStreamId)}/reset-stream-key`);
  }
  createPlaybackId(liveStreamId, params) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to create a live stream playback ID"));
    }
    if (!params) {
      return Promise.reject(new Error("A playback policy is required to create a live stream playback ID"));
    }
    return this.http.post(`${buildBasePath2(liveStreamId)}/playback-ids`, params);
  }
  deletePlaybackId(liveStreamId, playbackId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to delete a live stream playback ID"));
    }
    if (!playbackId) {
      return Promise.reject(new Error("A live stream playback ID is required to delete a live stream playback ID"));
    }
    return this.http.delete(`${buildBasePath2(liveStreamId)}/playback-ids/${playbackId}`);
  }
  playbackId(liveStreamId, playbackId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required"));
    }
    if (!playbackId) {
      return Promise.reject(new Error("A playback ID is required"));
    }
    return this.http.get(`${buildBasePath2(liveStreamId)}/playback-ids/${playbackId}`);
  }
  createSimulcastTarget(liveStreamId, params) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to create a simulcast target"));
    }
    if (!(params && params.url)) {
      return Promise.reject(new Error("A url is required to create a simulcast target"));
    }
    return this.http.post(`${buildBasePath2(liveStreamId)}/simulcast-targets`, params);
  }
  getSimulcastTarget(liveStreamId, simulcastTargetId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to get a simulcast target"));
    }
    if (!simulcastTargetId) {
      return Promise.reject(new Error("A simulcast target ID is required to get a simulcast target"));
    }
    return this.http.get(`${buildBasePath2(liveStreamId)}/simulcast-targets/${simulcastTargetId}`);
  }
  deleteSimulcastTarget(liveStreamId, simulcastTargetId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to delete a simulcast target"));
    }
    if (!simulcastTargetId) {
      return Promise.reject(new Error("A simulcast target ID is required to delete a simulcast target"));
    }
    return this.http.delete(`${buildBasePath2(liveStreamId)}/simulcast-targets/${simulcastTargetId}`);
  }
  async updateEmbeddedSubtitles(liveStreamId, params) {
    if (!liveStreamId || !params) {
      throw new Error("liveStreamId and params are required.");
    }
    return this.http.put(`${buildBasePath2(liveStreamId)}/embedded-subtitles`, params);
  }
  async updateGeneratedSubtitles(liveStreamId, params) {
    if (!liveStreamId || !params) {
      throw new Error("liveStreamId and params are required.");
    }
    return this.http.put(`${buildBasePath2(liveStreamId)}/generated-subtitles`, params);
  }
  disable(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to disable a live stream"));
    }
    return this.http.put(`${buildBasePath2(liveStreamId)}/disable`);
  }
  enable(liveStreamId) {
    if (!liveStreamId) {
      return Promise.reject(new Error("A live stream ID is required to enable a live stream"));
    }
    return this.http.put(`${buildBasePath2(liveStreamId)}/enable`);
  }
};

// src/video/resources/playbackIds.ts
var PATH3 = "/video/v1/playback-ids";
var buildBasePath3 = (playbackId) => `${PATH3}/${playbackId}`;
var PlaybackIds = class extends Base {
  get(playbackId) {
    if (!playbackId) {
      return Promise.reject(new Error("An playback ID is required to get an asset or live stream identifier"));
    }
    return this.http.get(buildBasePath3(playbackId));
  }
};

// src/video/resources/uploads.ts
var PATH4 = "/video/v1/uploads";
var buildBasePath4 = (uploadId) => `${PATH4}/${uploadId}`;
var Uploads = class extends Base {
  create(params) {
    if (!params) {
      return Promise.reject(new Error("Params are required for creating a direct upload"));
    }
    return this.http.post(PATH4, params);
  }
  cancel(uploadId) {
    if (!uploadId) {
      return Promise.reject(new Error("An upload ID is required"));
    }
    return this.http.put(`${buildBasePath4(uploadId)}/cancel`);
  }
  get(uploadId) {
    if (!uploadId) {
      return Promise.reject(new Error("An upload ID is required to get an asset"));
    }
    return this.http.get(buildBasePath4(uploadId));
  }
  list(params) {
    return this.http.get(PATH4, { params });
  }
};

// src/video/resources/signingKeys.ts
var PATH5 = "/video/v1/signing-keys";
var buildBasePath5 = (keyId) => `${PATH5}/${keyId}`;
var SigningKeys = class extends Base {
  create() {
    return this.http.post(PATH5, {});
  }
  get(keyId) {
    if (!keyId) {
      return Promise.reject(new Error("An signing key ID is required."));
    }
    return this.http.get(buildBasePath5(keyId));
  }
  del(keyId) {
    if (!keyId) {
      return Promise.reject(new Error("An signing key ID is required."));
    }
    return this.http.delete(buildBasePath5(keyId));
  }
  list(params = {}) {
    return this.http.get(PATH5, { params });
  }
};

// src/video/resources/deliveryUsage.ts
var PATH6 = "/video/v1/delivery-usage";
var DeliveryUsage = class extends Base {
  list(params) {
    return this.http.get(PATH6, { params });
  }
};

// src/video/resources/playbackRestrictions.ts
var PATH7 = "/video/v1/playback-restrictions";
var buildBasePath6 = (restrictionId) => `${PATH7}/${restrictionId}`;
var PlaybackRestrictions = class extends Base {
  create(restriction) {
    return this.http.post(PATH7, restriction);
  }
  list() {
    return this.http.get(PATH7);
  }
  get(restrictionId) {
    return this.http.get(buildBasePath6(restrictionId));
  }
  delete(restrictionId) {
    return this.http.delete(buildBasePath6(restrictionId));
  }
  putReferrer(restrictionId, referrer) {
    return this.http.put(`${buildBasePath6(restrictionId)}/referrer`, referrer);
  }
};

// src/video/resources/spaces.ts
var BASE_PATH = "/video/v1/spaces";
var SPACE_PATH = (spaceId) => `${BASE_PATH}/${spaceId}`;
var BROADCAST_PATH = (spaceId, broadcastId) => `${SPACE_PATH(spaceId)}/broadcasts/${broadcastId}`;
var Broadcasts = class extends Base {
  create(spaceId, request) {
    return this.http.post(`${SPACE_PATH(spaceId)}/broadcasts`, request);
  }
  get(spaceId, broadcastId) {
    return this.http.get(BROADCAST_PATH(spaceId, broadcastId));
  }
  delete(spaceId, broadcastId) {
    return this.http.delete(BROADCAST_PATH(spaceId, broadcastId));
  }
  start(spaceId, broadcastId) {
    return this.http.post(`${BROADCAST_PATH(spaceId, broadcastId)}/start`);
  }
  stop(spaceId, broadcastId) {
    return this.http.post(`${BROADCAST_PATH(spaceId, broadcastId)}/stop`);
  }
};
var Spaces = class extends Base {
  constructor(accessTokenOrConfigOrBase, secret, config) {
    var __super = (...args) => {
      super(...args);
    };
    if (accessTokenOrConfigOrBase instanceof Base) {
      __super(accessTokenOrConfigOrBase);
    } else if (typeof accessTokenOrConfigOrBase === "object") {
      __super(accessTokenOrConfigOrBase);
    } else {
      __super(accessTokenOrConfigOrBase, secret, config ?? {});
    }
    this.Broadcasts = new Broadcasts(this);
  }
  create(req) {
    return this.http.post(BASE_PATH, req);
  }
  list(params) {
    return this.http.get(BASE_PATH, { params });
  }
  get(spaceId) {
    return this.http.get(SPACE_PATH(spaceId));
  }
  delete(spaceId) {
    return this.http.delete(SPACE_PATH(spaceId));
  }
};

// src/video/resources/transcriptionVocabularies.ts
var PATH8 = "/video/v1/transcription-vocabularies";
var buildBasePath7 = (transcriptionVocabularyId) => `${PATH8}/${transcriptionVocabularyId}`;
var TranscriptionVocabularies = class extends Base {
  create(transcriptionVocabulary) {
    return this.http.post(PATH8, transcriptionVocabulary);
  }
  list() {
    return this.http.get(PATH8);
  }
  get(transcriptionVocabularyId) {
    return this.http.get(buildBasePath7(transcriptionVocabularyId));
  }
  delete(transcriptionVocabularyId) {
    return this.http.delete(buildBasePath7(transcriptionVocabularyId));
  }
  update(transcriptionVocabularyId, transcriptionVocabulary) {
    return this.http.put(`${buildBasePath7(transcriptionVocabularyId)}`, transcriptionVocabulary);
  }
};

// src/video/video.ts
var Video = class extends Base {
  constructor(accessTokenOrConfigOrBase, secret, config) {
    var __super = (...args) => {
      super(...args);
    };
    if (accessTokenOrConfigOrBase instanceof Base) {
      __super(accessTokenOrConfigOrBase);
    } else if (typeof accessTokenOrConfigOrBase === "object") {
      __super(accessTokenOrConfigOrBase);
    } else {
      __super(accessTokenOrConfigOrBase, secret, config);
    }
    this.Assets = new Assets(this);
    this.LiveStreams = new LiveStreams(this);
    this.PlaybackIds = new PlaybackIds(this);
    this.Uploads = new Uploads(this);
    this.SigningKeys = new SigningKeys(this);
    this.DeliveryUsage = new DeliveryUsage(this);
    this.PlaybackRestrictions = new PlaybackRestrictions(this);
    this.Spaces = new Spaces(this);
    this.TranscriptionVocabularies = new TranscriptionVocabularies(this);
  }
};

// src/data/resources/errors.ts
var PATH9 = "/data/v1/errors";
var Errors = class extends Base {
  list(params) {
    return this.http.get(PATH9, { params });
  }
};

// src/data/resources/exports.ts
var PATH10 = "/data/v1/exports";
var Exports = class extends Base {
  list() {
    return this.http.get(PATH10);
  }
};

// src/data/resources/filters.ts
var PATH11 = "/data/v1/filters";
var Filters = class extends Base {
  get(filterId, params) {
    process.emitWarning("The Filter API has been deprecated, please use Dimension instead", "DeprecatedWarning");
    if (!filterId) {
      throw new Error("Filter Id is required to get filter information.");
    }
    return this.http.get(`${PATH11}/${filterId}`, { params });
  }
  list() {
    process.emitWarning("The Filter API has been deprecated, please use Dimension instead", "DeprecatedWarning");
    return this.http.get(PATH11);
  }
};

// src/data/resources/dimensions.ts
var PATH12 = "/data/v1/dimensions";
var Dimensions = class extends Base {
  get(dimensionId, params) {
    if (!dimensionId) {
      throw new Error("Dimension Id is required to get dimension information.");
    }
    return this.http.get(`${PATH12}/${dimensionId}`, { params });
  }
  list() {
    return this.http.get(PATH12);
  }
};

// src/data/resources/incidents.ts
var PATH13 = "/data/v1/incidents";
var Incidents = class extends Base {
  list(params) {
    return this.http.get(PATH13, { params });
  }
  get(incidentId) {
    if (!incidentId) {
      throw new Error("An incident id is required for incident details.");
    }
    return this.http.get(`${PATH13}/${incidentId}`);
  }
  related(incidentId, params) {
    if (!incidentId) {
      throw new Error("An incident id is required for related incidents.");
    }
    return this.http.get(`${PATH13}/${incidentId}/related`, { params });
  }
};

// src/data/resources/metrics.ts
var PATH14 = "/data/v1/metrics";
var Metrics = class extends Base {
  breakdown(metricId, params) {
    return this.http.get(`${PATH14}/${metricId}/breakdown`, { params });
  }
  comparison(params) {
    if (!params || params && !params.value) {
      throw new Error("The value query parameter is required for comparing metrics");
    }
    return this.http.get(`${PATH14}/comparison`, { params });
  }
  insights(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for insight metrics.");
    }
    return this.http.get(`${PATH14}/${metricId}/insights`, { params });
  }
  overall(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for overall metrics.");
    }
    return this.http.get(`${PATH14}/${metricId}/overall`, { params });
  }
  timeseries(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for timeseries metrics.");
    }
    return this.http.get(`${PATH14}/${metricId}/timeseries`, { params });
  }
};

// src/data/resources/real_time.ts
var PATH15 = "/data/v1/realtime";
var RealTime = class extends Base {
  dimensions() {
    return this.http.get(`${PATH15}/dimensions`);
  }
  metrics() {
    return this.http.get(`${PATH15}/metrics`);
  }
  breakdown(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for real-time breakdown information");
    }
    if (!params || params && !params.dimension) {
      throw new Error("The dimension query parameter is required for real-time breakdown information");
    }
    return this.http.get(`${PATH15}/metrics/${metricId}/breakdown`, { params });
  }
  histogramTimeseries(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for real-time histogram timeseries information");
    }
    return this.http.get(`${PATH15}/metrics/${metricId}/histogram-timeseries`, {
      params
    });
  }
  timeseries(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for real-time timeseries information.");
    }
    return this.http.get(`${PATH15}/metrics/${metricId}/timeseries`, {
      params
    });
  }
};

// src/data/resources/monitoring.ts
var PATH16 = "/data/v1/monitoring";
var Monitoring = class extends Base {
  dimensions() {
    return this.http.get(`${PATH16}/dimensions`);
  }
  metrics() {
    return this.http.get(`${PATH16}/metrics`);
  }
  breakdown(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for monitoring breakdown information");
    }
    if (!params || params && !params.dimension) {
      throw new Error("The dimension query parameter is required for monitoring breakdown information");
    }
    return this.http.get(`${PATH16}/metrics/${metricId}/breakdown`, { params });
  }
  histogramTimeseries(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for monitoring histogram timeseries information");
    }
    return this.http.get(`${PATH16}/metrics/${metricId}/histogram-timeseries`, {
      params
    });
  }
  timeseries(metricId, params) {
    if (!metricId) {
      throw new Error("A metric Id is required for monitoring timeseries information.");
    }
    return this.http.get(`${PATH16}/metrics/${metricId}/timeseries`, {
      params
    });
  }
};

// src/data/resources/video_views.ts
var PATH17 = "/data/v1/video-views";
var VideoViews = class extends Base {
  list(params) {
    return this.http.get(PATH17, { params });
  }
  get(videoViewId) {
    if (!videoViewId) {
      throw new Error("A video view Id is required for video view details.");
    }
    return this.http.get(`${PATH17}/${videoViewId}`);
  }
};

// src/data/data.ts
var Data = class extends Base {
  constructor(accessTokenOrConfigOrBase, secret, config) {
    var __super = (...args) => {
      super(...args);
    };
    if (accessTokenOrConfigOrBase instanceof Base) {
      __super(accessTokenOrConfigOrBase);
    } else if (typeof accessTokenOrConfigOrBase === "object") {
      __super(accessTokenOrConfigOrBase);
    } else {
      __super(accessTokenOrConfigOrBase, secret, config);
    }
    this.Errors = new Errors(this);
    this.Exports = new Exports(this);
    this.Filters = new Filters(this);
    this.Dimensions = new Dimensions(this);
    this.Incidents = new Incidents(this);
    this.Metrics = new Metrics(this);
    this.RealTime = new RealTime(this);
    this.Monitoring = new Monitoring(this);
    this.VideoViews = new VideoViews(this);
  }
};

// src/webhooks/resources/verify_header.ts
import crypto from "crypto";
var HeaderScheme = {
  V1: "v1"
};
var DEFAULT_TOLERANCE = 300;
var EXPECTED_SCHEME = HeaderScheme.V1;
function secureCompare(_a, _b) {
  const a = Buffer.from(_a);
  const b = Buffer.from(_b);
  if (a.length !== b.length) {
    return false;
  }
  if (crypto.timingSafeEqual) {
    return crypto.timingSafeEqual(a, b);
  }
  const len = a.length;
  let result = 0;
  for (let i = 0; i < len; i += 1) {
    result |= a[i] ^ b[i];
  }
  return result === 0;
}
var VerifyHeader = class {
  static parseHeader(header, scheme = HeaderScheme.V1) {
    if (typeof header !== "string") {
      return null;
    }
    if (scheme !== EXPECTED_SCHEME) {
      throw new Error(`Unrecognized header scheme: '${scheme}'`);
    }
    return header.split(",").reduce((accum, item) => {
      const kv = item.split("=");
      if (kv[0] === "t") {
        accum.timestamp = parseInt(kv[1], 10);
      }
      if (kv[0] === scheme && typeof kv[1] === "string") {
        accum.signatures.push(kv[1]);
      }
      return accum;
    }, {
      timestamp: -1,
      signatures: []
    });
  }
  static computeSignature(payload, secret) {
    return crypto.createHmac("sha256", secret).update(payload, "utf8").digest("hex");
  }
  static verify(_payload, _header, secret, tolerance = DEFAULT_TOLERANCE) {
    const payload = Buffer.isBuffer(_payload) ? _payload.toString("utf8") : _payload;
    const header = Buffer.isBuffer(_header) ? _header.toString("utf8") : _header;
    const details = this.parseHeader(header);
    if (!details || details.timestamp === -1) {
      throw new Error("Unable to extract timestamp and signatures from header");
    }
    if (!details.signatures.length) {
      throw new Error("No signatures found with expected scheme");
    }
    const expectedSignature = this.computeSignature(`${details.timestamp}.${payload}`, secret);
    const signatureFound = !!details.signatures.filter((sig) => secureCompare(sig, expectedSignature)).length;
    if (!signatureFound) {
      throw new Error("No signatures found matching the expected signature for payload.");
    }
    const timestampAge = Math.floor(Date.now() / 1e3) - details.timestamp;
    if (tolerance > 0 && timestampAge > tolerance) {
      throw new Error("Timestamp outside the tolerance zone");
    }
    return true;
  }
};

// src/webhooks/webhooks.ts
var Webhooks = class {
  static verifyHeader(body, signature, secret) {
    return VerifyHeader.verify(body, signature, secret);
  }
};

// src/utils/jwt.ts
import fs from "fs";
import jwt from "jsonwebtoken";
var TypeClaim = /* @__PURE__ */ ((TypeClaim2) => {
  TypeClaim2["video"] = "v";
  TypeClaim2["thumbnail"] = "t";
  TypeClaim2["gif"] = "g";
  TypeClaim2["storyboard"] = "s";
  TypeClaim2["stats"] = "playback_id";
  return TypeClaim2;
})(TypeClaim || {});
var DataTypeClaim = /* @__PURE__ */ ((DataTypeClaim2) => {
  DataTypeClaim2["video"] = "video_id";
  DataTypeClaim2["asset"] = "asset_id";
  DataTypeClaim2["playback"] = "playback_id";
  DataTypeClaim2["live_stream"] = "livestream_id";
  return DataTypeClaim2;
})(DataTypeClaim || {});
var getSigningKey = (options) => {
  const keyId = options.keyId || process.env.MUX_SIGNING_KEY;
  if (!keyId) {
    throw new TypeError("Signing Key ID required");
  }
  return keyId;
};
var getPrivateKey = (options) => {
  let key;
  if (options.keySecret) {
    key = options.keySecret;
  } else if (options.keyFilePath) {
    key = fs.readFileSync(options.keyFilePath);
  } else if (process.env.MUX_PRIVATE_KEY) {
    key = Buffer.from(process.env.MUX_PRIVATE_KEY, "base64");
  }
  if (Buffer.isBuffer(key)) {
    return key;
  }
  if (key) {
    const [rsaHeader] = key.toString().split("\n");
    if (rsaHeader === "-----BEGIN RSA PRIVATE KEY-----") {
      return key;
    }
    try {
      return Buffer.from(key, "base64");
    } catch (err) {
      throw new TypeError("Specified signing key must be either a valid PEM string or a base64 encoded PEM.");
    }
  }
  throw new TypeError("Signing Key ID required");
};
var JWT = class {
  static sign(playbackId, options = {}) {
    process.emitWarning("The JWT.sign() method has been deprecated, please use JWT.signPlaybackId() instead", "DeprecatedWarning");
    return this.signPlaybackId(playbackId, options);
  }
  static signPlaybackId(playbackId, options = {}) {
    const opts = {
      type: "video",
      expiration: "7d",
      params: {},
      ...options
    };
    const keyId = getSigningKey(options);
    const keySecret = getPrivateKey(options);
    const typeClaim = TypeClaim[opts.type];
    if (!typeClaim) {
      throw new Error(`Invalid signature type: ${opts.type}`);
    }
    const tokenOptions = {
      keyid: keyId,
      subject: playbackId,
      audience: typeClaim,
      expiresIn: opts.expiration,
      noTimestamp: true,
      algorithm: "RS256"
    };
    return jwt.sign(opts.params, keySecret, tokenOptions);
  }
  static signSpaceId(spaceId, options = {}) {
    const opts = {
      expiration: "7d",
      params: {},
      ...options
    };
    const keyId = getSigningKey(options);
    const keySecret = getPrivateKey(options);
    const tokenOptions = {
      keyid: keyId,
      subject: spaceId,
      audience: "rt",
      expiresIn: opts.expiration,
      noTimestamp: true,
      algorithm: "RS256"
    };
    if (!spaceId) {
      throw new TypeError("A valid Space ID is required");
    }
    return jwt.sign(opts.params, keySecret, tokenOptions);
  }
  static signViewerCounts(Id, options = {}) {
    const opts = {
      type: "video",
      expiration: "7d",
      params: {},
      ...options
    };
    const keyId = getSigningKey(options);
    const keySecret = getPrivateKey(options);
    const typeClaim = DataTypeClaim[opts.type];
    if (!typeClaim) {
      throw new Error(`Invalid signature type: ${opts.type}`);
    }
    const tokenOptions = {
      keyid: keyId,
      subject: Id,
      audience: typeClaim,
      expiresIn: opts.expiration,
      noTimestamp: true,
      algorithm: "RS256"
    };
    return jwt.sign(opts.params, keySecret, tokenOptions);
  }
  static decode(token) {
    return jwt.decode(token);
  }
};

// src/mux.ts
var Mux = class extends Base {
  constructor(accessTokenOrConfig, secret, config) {
    var __super = (...args) => {
      super(...args);
    };
    accessTokenOrConfig = accessTokenOrConfig ?? {};
    if (typeof accessTokenOrConfig === "object") {
      __super(accessTokenOrConfig);
    } else {
      __super(accessTokenOrConfig, secret, config ?? {});
    }
    this.Video = new Video(this);
    this.Data = new Data(this);
  }
};
Mux.JWT = JWT;
Mux.Webhooks = Webhooks;
export {
  Mux as default
};
/*!
 * JWT - Signed URL Helpers
 * Note: Hacking this module into a class with static methods because ESDoc forces it. We'll revisit ESDoc later.
 * Documentationjs looks real nice.
 */
/*!
 * Mux
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Assets
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Data
 * Copyright(c) 2022 Mux Inc.
 */
/*!
 * Mux DeliveryUsage
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Dimensions
 * Copyright(c) 2022 Mux Inc.
 */
/*!
 * Mux Errors
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Exports
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Filters
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Incidents
 * Copyright(c) 2019 Mux Inc.
 */
/*!
 * Mux Live Streams
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Metrics
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Monitoring
 * Copyright(c) 2020 Mux Inc.
 */
/*!
 * Mux Real-Time
 * Copyright(c) 2020 Mux Inc.
 */
/*!
 * Mux Signing Keys
 * Copyright(c) 2018 Mux Inc.
 */
/*!
 * Mux Video
 * Copyright(c) 2022 Mux Inc.
 */
/*!
 * Mux Video Views
 * Copyright(c) 2018 Mux Inc.
 */
//# sourceMappingURL=mux.mjs.map